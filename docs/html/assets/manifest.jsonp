window.loadDocumentationManifest({
  "name": "fluen-core",
  "root_path": "/Users/abidev/dev/fluen-core",
  "primary_language": "Python",
  "frameworks": [
    "dataclasses is used for simplified class definitions",
    "YAML configuration style",
    "dataclasses",
    "Jiva Framework",
    "Claude by Anthropic",
    "asyncio (implicit async usage for asynchronous operations)",
    "artifacts follow Python's typing hints for better type checking",
    "Detected use of the Jinja2 template engine based on template syntax.",
    "Possible integration with Sphinx or a custom documentation generation tool.",
    "D3.js",
    "JavaScript ES6 features",
    "YAML format for configuration",
    "Jinja2",
    "Markdown",
    "Python",
    "logging",
    "pathlib",
    "regular expressions (re)",
    "Click",
    "Rich",
    "asyncio",
    "Python Type Hints",
    "setuptools",
    "jinja2",
    "pytest",
    "unittest.mock (AsyncMock and Mock)",
    "aiohttp",
    "Python type hinting",
    "Jinja2 template engine (indicated by use of {{ }} for variable interpolation and {% %} for control structures)",
    "AsyncIO",
    "Python: asyncio, rich for async operations and console progress updates",
    "typing"
  ],
  "files": {
    "src/fluen/config.py": {
      "path": "src/fluen/config.py",
      "language": "Python",
      "purpose": "This code provides a configuration management system for an application that uses a large language model (LLM). It allows for loading, creating, and ensuring directories for configurations stored in YAML files.",
      "exposures": [
        {
          "name": "LLMConfig",
          "type": "exposure",
          "file_path": "src/fluen/config.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FluenConfig",
          "type": "exposure",
          "file_path": "src/fluen/config.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FluenConfig.load",
          "type": "exposure",
          "file_path": "src/fluen/config.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FluenConfig.create_default",
          "type": "exposure",
          "file_path": "src/fluen/config.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FluenConfig.ensure_directories",
          "type": "exposure",
          "file_path": "src/fluen/config.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "dataclasses",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/git_integration/manager.py",
            "src/fluen/analyzer/file_analyzer.py"
          ]
        },
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/git_integration/manager.py",
            "src/fluen/cli.py",
            "src/fluen/generator/templates/template_manager.py",
            "src/fluen/models/scan.py",
            "src/fluen/tests/conftest.py",
            "src/fluen/analyzer/file_analyzer.py",
            "src/fluen/tests/test_git_manager.py"
          ]
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/llm_factory.py",
            "src/fluen/git_integration/manager.py",
            "src/fluen/llm_providers/base_provider.py",
            "src/fluen/cli.py",
            "src/fluen/generator/templates/template_manager.py",
            "src/fluen/models/scan.py",
            "src/fluen/llm_providers/ollama_provider.py",
            "src/fluen/tests/conftest.py",
            "src/fluen/analyzer/file_analyzer.py",
            "src/fluen/llm_providers/openai_provider.py",
            "src/fluen/llm_providers/mistral_ai_provider.py"
          ]
        },
        {
          "name": "yaml",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "os",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "LLMConfig",
          "type": "class",
          "file_path": "src/fluen/config.py",
          "line_number": 9,
          "scope": "global",
          "purpose": "Holds configuration for the large language model provider and its parameters.",
          "documentation": "A dataclass representing the configuration settings for a language model provider, including provider name, API key, model type, API base URL, max retries, and timeout settings."
        },
        {
          "name": "FluenConfig",
          "type": "class",
          "file_path": "src/fluen/config.py",
          "line_number": 17,
          "scope": "global",
          "purpose": "Manages application configurations, specifically for settings related to directory paths and LLM configurations.",
          "documentation": "A dataclass that stores configuration details regarding output, cache, and temporary directories, as well as the default export type. It also includes methods to load configurations from a YAML file and ensure required directories exist."
        },
        {
          "name": "FluenConfig.load",
          "type": "method",
          "file_path": "src/fluen/config.py",
          "line_number": 26,
          "scope": "class method",
          "purpose": "Loads configurations from a specified YAML file.",
          "documentation": "A class method that attempts to load a configuration from the given file path. If the specified YAML file does not exist, it creates a default configuration instead. Parses YAML content into corresponding configuration objects."
        },
        {
          "name": "FluenConfig.create_default",
          "type": "method",
          "file_path": "src/fluen/config.py",
          "line_number": 39,
          "scope": "class method",
          "purpose": "Creates a default configuration and saves it to a file.",
          "documentation": "A class method that generates a default configuration for the application using standard settings. This method saves the default configuration in a YAML file at the specified path and ensures all parent directories are created."
        },
        {
          "name": "FluenConfig.ensure_directories",
          "type": "method",
          "file_path": "src/fluen/config.py",
          "line_number": 69,
          "scope": "instance method",
          "purpose": "Ensures that all necessary directories exist.",
          "documentation": "Ensures that the output, cache, and temporary directories are created in the file system if they do not already exist. This prevents runtime errors related to missing directories."
        }
      ],
      "framework_hints": [
        "dataclasses is used for simplified class definitions"
      ],
      "last_modified": "2024-11-13T17:46:42.341938",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "dataclasses",
          "pathlib",
          "typing",
          "yaml",
          "os"
        ],
        "imported_by": []
      }
    },
    "fluen_config.example.yml": {
      "path": "fluen_config.example.yml",
      "language": "Unknown",
      "purpose": "Configuration file for the Fluen code documentation generator, allowing users to specify settings related to LLM provider selection, documentation output formats, caching, and project-specific configurations.",
      "exposures": [
        {
          "name": "llm:provider",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "llm:api_key",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "llm:model",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "output_dir",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "cache_dir",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "temp_dir",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "default_export_type",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "project:name",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "project:description",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "project:ignore_patterns",
          "type": "exposure",
          "file_path": "fluen_config.example.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "OpenAI API",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Mistral API",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Ollama API",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "llm",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 4,
          "scope": "global",
          "purpose": "Configuration object for specifying LLM provider details.",
          "documentation": "This object holds specific configurations for different LLM providers such as OpenAI, Mistral, or Ollama, including provider type, API keys, and model selections."
        },
        {
          "name": "provider",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 6,
          "scope": "llm",
          "purpose": "Specifies the LLM provider to be used.",
          "documentation": "Allows selection among 'openai', 'mistral', or 'ollama'. Users should uncomment the relevant lines based on the chosen provider."
        },
        {
          "name": "api_key",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 9,
          "scope": "llm",
          "purpose": "Holds the API key for authentication with the chosen LLM provider.",
          "documentation": "Users are required to enter their API key for the selected provider to enable access to the LLM services."
        },
        {
          "name": "model",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 10,
          "scope": "llm",
          "purpose": "Defines the model to be used with the selected LLM provider.",
          "documentation": "Different models can be specified based on provider and use case needs. Possible values include 'gpt-3.5-turbo', 'gpt-4', 'mistral-small-latest', etc."
        },
        {
          "name": "output_dir",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 22,
          "scope": "global",
          "purpose": "Specifies the directory for documentation output files.",
          "documentation": "The path where generated documentation will be stored. Users can customize this to match their project structure."
        },
        {
          "name": "cache_dir",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 25,
          "scope": "global",
          "purpose": "Defines the directory for storing cache files.",
          "documentation": "Used to store intermediate analysis results to speed up subsequent operations."
        },
        {
          "name": "temp_dir",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 26,
          "scope": "global",
          "purpose": "Defines the directory for storing temporary files.",
          "documentation": "Temporary processing files are stored here and can be cleaned regularly to free up space."
        },
        {
          "name": "default_export_type",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 29,
          "scope": "global",
          "purpose": "Sets the default format for documentation output.",
          "documentation": "Users can choose between 'html' and 'md' formats based on their needs for documentation presentation."
        },
        {
          "name": "project",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 32,
          "scope": "global",
          "purpose": "Encapsulates project-specific settings.",
          "documentation": "Contains metadata about the project including name, description, and ignore patterns to exclude certain files/directories from processing."
        },
        {
          "name": "name",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 33,
          "scope": "project",
          "purpose": "Defines the name of the project.",
          "documentation": "Serves as an identifier for the project within the Fluen tool."
        },
        {
          "name": "description",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 34,
          "scope": "project",
          "purpose": "Provides a brief description of the project.",
          "documentation": "Descriptive text about the project to give context to users or integrators."
        },
        {
          "name": "ignore_patterns",
          "type": "variable",
          "file_path": "fluen_config.example.yml",
          "line_number": 35,
          "scope": "project",
          "purpose": "Lists files and directories to ignore during processing.",
          "documentation": "Patterns matching files or directories that should be excluded from analysis, useful for ignoring build artifacts or configuration files."
        }
      ],
      "framework_hints": [
        "YAML configuration style"
      ],
      "last_modified": "2024-11-13T17:47:28.482281",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "OpenAI API",
          "Mistral API",
          "Ollama API"
        ],
        "imported_by": []
      }
    },
    "src/fluen/llm_factory.py": {
      "path": "src/fluen/llm_factory.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to provide a factory class, LLMProviderFactory, that creates instances of different LLM provider classes based on a provider name and configuration map.",
      "exposures": [
        {
          "name": "LLMProviderFactory",
          "type": "exposure",
          "file_path": "src/fluen/llm_factory.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "LLMProviderFactory.create",
          "type": "exposure",
          "file_path": "src/fluen/llm_factory.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.llm_providers.base_provider",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.llm_providers.openai_provider",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.llm_providers.mistral_ai_provider",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.llm_providers.ollama_provider",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "LLMProviderFactory",
          "type": "class",
          "file_path": "src/fluen/llm_factory.py",
          "line_number": 7,
          "scope": "global",
          "purpose": "A factory class used to create LLM provider instances.",
          "documentation": "LLMProviderFactory offers a class method to create various LLM provider instances based on the given provider name and configuration."
        },
        {
          "name": "_providers",
          "type": "variable",
          "file_path": "src/fluen/llm_factory.py",
          "line_number": 8,
          "scope": "class",
          "purpose": "Holds mappings of provider names to their respective classes.",
          "documentation": "A dictionary mapping string identifiers to LLM provider classes; used to determine which class to instantiate in the create method."
        },
        {
          "name": "create",
          "type": "method",
          "file_path": "src/fluen/llm_factory.py",
          "line_number": 14,
          "scope": "class",
          "purpose": "Creates an instance of a selected LLM provider.",
          "documentation": "Class method that receives a provider name and configuration dictionary, verifies the provider exists, and returns an instance of the requested LLM provider class."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:47:39.735133",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "typing",
          "fluen.llm_providers.base_provider",
          "fluen.llm_providers.openai_provider",
          "fluen.llm_providers.mistral_ai_provider",
          "fluen.llm_providers.ollama_provider"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/__init__.py": {
      "path": "src/fluen/generator/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:47:45.751282",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/git_integration/manager.py": {
      "path": "src/fluen/git_integration/manager.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to provide functionality for managing and analyzing Git repositories, including initialization, cloning, and retrieving changes between commits.",
      "exposures": [
        {
          "name": "GitManager",
          "type": "exposure",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "GitDiff",
          "type": "exposure",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "git",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/tests/conftest.py",
            "src/fluen/analyzer/file_analyzer.py"
          ]
        },
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/doc_generator.py",
            "src/fluen/generator/cross_referencer.py",
            "src/fluen/state/manager.py",
            "src/fluen/generator/templates/template_manager.py",
            "src/fluen/generator/manifest.py",
            "src/fluen/analyzer/file_analyzer.py",
            "src/fluen/orchestrator.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        }
      ],
      "elements": [
        {
          "name": "GitDiff",
          "type": "class",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 12,
          "scope": "global",
          "purpose": "Represents changes between commits in a Git repository.",
          "documentation": "GitDiff is a data class that stores lists of added, modified, and deleted files, as well as the raw diff string for Git commit comparisons."
        },
        {
          "name": "GitManager",
          "type": "class",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 18,
          "scope": "global",
          "purpose": "Manages Git repository operations such as initialization, cloning, and fetching commit differences.",
          "documentation": "GitManager provides methods to initialize a repository, clone it, get the current commit hash, retrieve changes since a given commit, and fetch file contents at specific commits."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 19,
          "scope": "GitManager",
          "purpose": "Initializes a GitManager instance with an optional repository path.",
          "documentation": "Sets up the GitManager with a specified or current directory as the repository path and initializes logging."
        },
        {
          "name": "initialize",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 25,
          "scope": "GitManager",
          "purpose": "Establishes a connection to a Git repository.",
          "documentation": "Attempts to open a Git repository at the given path. Logs an error if the repository is invalid."
        },
        {
          "name": "clone",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 32,
          "scope": "GitManager",
          "purpose": "Clones a remote Git repository to a specified path.",
          "documentation": "Clones the repository from a given URL to the target path. Logs errors if the operation fails."
        },
        {
          "name": "get_current_commit",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 41,
          "scope": "GitManager",
          "purpose": "Fetches the hash of the current commit in the repository.",
          "documentation": "Returns the hexadecimal hash of the current commit from the HEAD of the repository."
        },
        {
          "name": "get_changes_since_commit",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 46,
          "scope": "GitManager",
          "purpose": "Retrieves changes between the current HEAD and a specified commit.",
          "documentation": "Compares the current HEAD with a given commit hash, returning lists of added, modified, and deleted files along with the raw diff."
        },
        {
          "name": "get_file_content",
          "type": "method",
          "file_path": "src/fluen/git_integration/manager.py",
          "line_number": 60,
          "scope": "GitManager",
          "purpose": "Retrieves the contents of a file at a specific commit.",
          "documentation": "Returns the content of a specified file either at the current HEAD or a specific commit. Logs errors if the file cannot be read."
        }
      ],
      "framework_hints": [
        "dataclasses"
      ],
      "last_modified": "2024-11-13T17:47:58.174156",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "git",
          "pathlib",
          "typing",
          "dataclasses",
          "logging"
        ],
        "imported_by": []
      }
    },
    "README.md": {
      "path": "README.md",
      "language": "Unknown",
      "purpose": "Fluen is a documentation generator powered by LLMs (Large Language Models). It creates intelligent documentation by analyzing git repositories to capture the structure, intent, and relationships within the codebase.",
      "exposures": [
        {
          "name": "fluen.docs.generate",
          "type": "exposure",
          "file_path": "README.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "fluen.docs.export",
          "type": "exposure",
          "file_path": "README.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "fluen_config.yml",
          "type": "exposure",
          "file_path": "README.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "Python 3.9+",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Git",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "An API key from OpenAI or Mistral AI",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Jiva Framework",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Claude by Anthropic",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "fluen docs generate",
          "type": "command",
          "file_path": "README.md",
          "line_number": null,
          "scope": "CLI Command",
          "purpose": "Analyzes the project and generates a code manifest.json file.",
          "documentation": "This command is used to scan a git repository and create a comprehensive manifest describing the project's code structure, purpose, and relationships."
        },
        {
          "name": "fluen docs export",
          "type": "command",
          "file_path": "README.md",
          "line_number": null,
          "scope": "CLI Command",
          "purpose": "Exports generated documentation in the specified format.",
          "documentation": "Translates the manifest.json into documentation formats like HTML or Markdown. The format can be specified directly via command line arguments."
        },
        {
          "name": "fluen_config.yml",
          "type": "configuration file",
          "file_path": "README.md",
          "line_number": null,
          "scope": "Configuration",
          "purpose": "Configures the Fluen tool, specifying LLM provider settings and output preferences.",
          "documentation": "This YAML file includes settings such as the LLM provider, API key, model, and output directory for generated documentation."
        }
      ],
      "framework_hints": [
        "Jiva Framework",
        "Claude by Anthropic"
      ],
      "last_modified": "2024-11-13T17:48:10.548287",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "Python 3.9+",
          "Git",
          "An API key from OpenAI or Mistral AI",
          "Jiva Framework",
          "Claude by Anthropic"
        ],
        "imported_by": []
      }
    },
    "src/fluen/llm_providers/base_provider.py": {
      "path": "src/fluen/llm_providers/base_provider.py",
      "language": "Python",
      "purpose": "This code outlines an abstract base class for a language model provider interface. It defines the methods required for generating text from a prompt and obtaining text embeddings.",
      "exposures": [
        {
          "name": "BaseLLMProvider",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "generate",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "get_embedding",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "abc",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "BaseLLMProvider",
          "type": "class",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 5,
          "scope": "module",
          "purpose": "To serve as an abstract base class for language model providers.",
          "documentation": "BaseLLMProvider defines an interface for components that interact with language models. It enforces the implementation of two asynchronous methods: generate and get_embedding, for text generation and embedding extraction respectively."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 7,
          "scope": "BaseLLMProvider class",
          "purpose": "Abstract method to generate text based on a prompt.",
          "documentation": "The generate method should be implemented by subclasses to take a text prompt and return generated text, asynchronously."
        },
        {
          "name": "get_embedding",
          "type": "method",
          "file_path": "src/fluen/llm_providers/base_provider.py",
          "line_number": 11,
          "scope": "BaseLLMProvider class",
          "purpose": "Abstract method to obtain text embeddings.",
          "documentation": "The get_embedding method should be implemented by subclasses to convert input text into a list of floats representing the text's embedding, asynchronously."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:48:17.498187",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "abc",
          "typing"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/html/empty.html": {
      "path": "src/fluen/generator/templates/default/html/empty.html",
      "language": "Unknown",
      "purpose": "This HTML code serves as a static web page template for displaying project documentation, with placeholders for dynamic content rendering.",
      "exposures": [
        {
          "name": "HTML structure elements",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "CSS for styling",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "JavaScript for dynamic behavior",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "assets/styles.css",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "assets/script.js",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "<!DOCTYPE html>",
          "type": "declaration",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 1,
          "scope": "global",
          "purpose": "Defines the document type and version for browsers.",
          "documentation": "Specifies that the document is an HTML5 document."
        },
        {
          "name": "<html>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 2,
          "scope": "global",
          "purpose": "Root element of the HTML document.",
          "documentation": "Contains all other HTML elements."
        },
        {
          "name": "<head>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 3,
          "scope": "global",
          "purpose": "Container for metadata (data about data) of the HTML document.",
          "documentation": "Includes information like the document's title, linked CSS, and other meta-information."
        },
        {
          "name": "<meta charset=\"UTF-8\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 4,
          "scope": "global",
          "purpose": "Sets the character encoding for the HTML document.",
          "documentation": "Ensures the document is interpreted using UTF-8 character encoding."
        },
        {
          "name": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 5,
          "scope": "global",
          "purpose": "Sets the viewport settings for responsive web design.",
          "documentation": "Ensures proper rendering and touch zooming for the page across different devices."
        },
        {
          "name": "<title>{{ project.name }} Documentation</title>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 6,
          "scope": "global",
          "purpose": "Defines the title of the HTML document as seen in browsers.",
          "documentation": "Utilizes a placeholder to dynamically insert the project name into the page title."
        },
        {
          "name": "<link rel=\"stylesheet\" href=\"assets/styles.css\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 7,
          "scope": "global",
          "purpose": "Links a CSS file for styling the HTML document.",
          "documentation": "Applies styles from an external CSS file located at assets/styles.css."
        },
        {
          "name": "<body>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 8,
          "scope": "global",
          "purpose": "Container for the main content of the HTML document.",
          "documentation": "Contains all content visible on the page, including navigation, main content, etc."
        },
        {
          "name": "<nav class=\"sidebar\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 9,
          "scope": "global",
          "purpose": "Defines a navigation section of the webpage.",
          "documentation": "Serves as a sidebar navigation section, holding project name and language details."
        },
        {
          "name": "<div class=\"sidebar-header\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 10,
          "scope": "global",
          "purpose": "Container for the header of the navigation sidebar.",
          "documentation": "Contains header information, including project name and language."
        },
        {
          "name": "<h1>{{ project.name }}</h1>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 11,
          "scope": "localized within sidebar-header",
          "purpose": "Displays the project name.",
          "documentation": "Placeholder for dynamically rendering the project name in the navigation sidebar."
        },
        {
          "name": "<p>{{ project.primary_language }} Project</p>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 12,
          "scope": "localized within sidebar-header",
          "purpose": "Displays the project's primary language.",
          "documentation": "Placeholder for dynamically rendering the project's primary language in the navigation sidebar."
        },
        {
          "name": "<main class=\"content\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 14,
          "scope": "global",
          "purpose": "Container for the main content of the web page.",
          "documentation": "Holds the central content area of the page including project details and notices."
        },
        {
          "name": "<div class=\"project-info\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 15,
          "scope": "localized within content",
          "purpose": "Contains project-specific information.",
          "documentation": "Displays project information such as name, language, last update time, and commit."
        },
        {
          "name": "<div class=\"metadata\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 17,
          "scope": "localized within project-info",
          "purpose": "Holds additional project metadata",
          "documentation": "Displays metadata elements detailing about project attributes like language and commit details."
        },
        {
          "name": "<section class=\"empty-notice\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 24,
          "scope": "localized within content",
          "purpose": "Displays a notice when no files are available for documentation.",
          "documentation": "Informs users why no documentation files were found and provides potential reasons."
        },
        {
          "name": "<script src=\"assets/script.js\"></script>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/empty.html",
          "line_number": 33,
          "scope": "global",
          "purpose": "Link JavaScript file for additional functionality.",
          "documentation": "References an external JavaScript file located at assets/script.js for dynamic behavior."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:48:47.148809",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "assets/styles.css",
          "assets/script.js"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/doc_generator.py": {
      "path": "src/fluen/generator/doc_generator.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to generate project documentation in HTML and Markdown formats. It uses a templating system to create structured documentation based on project manifests.",
      "exposures": [
        {
          "name": "DocumentationGenerator",
          "type": "exposure",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "BaseFormatGenerator",
          "type": "exposure",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "HTMLGenerator",
          "type": "exposure",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "MarkdownGenerator",
          "type": "exposure",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "json",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/state/manager.py",
            "src/fluen/llm_providers/ollama_provider.py",
            "src/fluen/generator/manifest.py",
            "src/fluen/analyzer/file_analyzer.py"
          ]
        },
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/cross_referencer.py",
            "src/fluen/state/manager.py",
            "src/fluen/generator/manifest.py",
            "src/fluen/orchestrator.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "shutil",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/tests/conftest.py"
          ]
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.templates.template_manager.TemplateManager",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/cli.py",
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "fluen.generator.manifest.ManifestGenerator",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/cli.py",
            "src/fluen/orchestrator.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "fluen.generator.manifest.ProjectManifest",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/cross_referencer.py",
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "fluen.generator.manifest.ElementReference",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/cross_referencer.py"
          ]
        }
      ],
      "elements": [
        {
          "name": "DocumentationGenerator",
          "type": "class",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 13,
          "scope": "public",
          "purpose": "Coordinates the generation of documentation in various formats.",
          "documentation": "This class initializes with a project manifest, output directory, template manager, and manifest generator and manages the generation process for specified formats."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 14,
          "scope": "private",
          "purpose": "Constructor for DocumentationGenerator to initialize instance variables.",
          "documentation": "Initializes the documentation generator with given parameters for manifest, output directory, template manager, and manifest generator."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 21,
          "scope": "public",
          "purpose": "Generates documentation in the specified format.",
          "documentation": "Asynchronously generates documentation based on the specified format (HTML or Markdown) using the provided manifest and templates."
        },
        {
          "name": "_get_generator",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 35,
          "scope": "private",
          "purpose": "Selects the appropriate generator based on the format type.",
          "documentation": "Helper method to return an instance of either HTMLGenerator or MarkdownGenerator based on the specified format type."
        },
        {
          "name": "BaseFormatGenerator",
          "type": "class",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 46,
          "scope": "public",
          "purpose": "Abstract base class for format-specific documentation generators.",
          "documentation": "Provides a common interface and shared functionality for HTML and Markdown generators, including manifest management and logging."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 47,
          "scope": "private",
          "purpose": "Constructor for BaseFormatGenerator to initialize instance variables.",
          "documentation": "Initializes the base generator with given parameters for manifest, output directory, template manager, and optionally, a manifest generator."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 54,
          "scope": "public",
          "purpose": "Abstract method to generate documentation in specific format.",
          "documentation": "Designed to be overridden by subclasses to implement format-specific documentation generation logic."
        },
        {
          "name": "HTMLGenerator",
          "type": "class",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 58,
          "scope": "public",
          "purpose": "Generates HTML documentation.",
          "documentation": "Extends BaseFormatGenerator to implement HTML-specific documentation generation, including creating directory structures and rendering templates."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 59,
          "scope": "public",
          "purpose": "Generates HTML documentation.",
          "documentation": "Asynchronously creates directories, copies assets, and generates index and reference pages using the template manager."
        },
        {
          "name": "_copy_static_assets",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 82,
          "scope": "private",
          "purpose": "Copies static assets to output directory.",
          "documentation": "Copies CSS and JavaScript assets from the templates directory to the designated HTML assets directory."
        },
        {
          "name": "_generate_index_page",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 88,
          "scope": "private",
          "purpose": "Generates the main index HTML page.",
          "documentation": "Renders the main index page template using the manifest and writes it to the output directory as an HTML file."
        },
        {
          "name": "_generate_reference_pages",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 98,
          "scope": "private",
          "purpose": "Generates individual reference HTML pages.",
          "documentation": "Creates specific HTML reference pages for each file in the manifest, rendering templates with relationships and element data."
        },
        {
          "name": "_group_files_by_type",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 130,
          "scope": "private",
          "purpose": "Groups files by their programming language.",
          "documentation": "Organizes files in the manifest by their declared language/type for easier indexing and documentation."
        },
        {
          "name": "_group_elements_by_type",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 140,
          "scope": "private",
          "purpose": "Groups elements by their type.",
          "documentation": "Organizes code elements by type to facilitate structured documentation and rendering."
        },
        {
          "name": "_generate_empty_documentation",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 150,
          "scope": "private",
          "purpose": "Generates documentation for an empty project.",
          "documentation": "Creates an HTML page indicating that there are no files to document, using a default template for empty projects."
        },
        {
          "name": "MarkdownGenerator",
          "type": "class",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 166,
          "scope": "public",
          "purpose": "Generates Markdown documentation.",
          "documentation": "Extends BaseFormatGenerator to implement Markdown-specific documentation generation, including creating directory structures and rendering templates."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 167,
          "scope": "public",
          "purpose": "Generates Markdown documentation.",
          "documentation": "Asynchronously creates directories and generates README, reference documents, and a summary for navigation in Markdown format."
        },
        {
          "name": "_generate_readme",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 187,
          "scope": "private",
          "purpose": "Generates the main Markdown README file.",
          "documentation": "Renders and writes a Markdown README file using template data derived from the project manifest."
        },
        {
          "name": "_generate_reference_docs",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 193,
          "scope": "private",
          "purpose": "Generates reference Markdown documents.",
          "documentation": "Creates Markdown files for each file in the manifest, detailing code elements and any additional context data."
        },
        {
          "name": "_generate_summary",
          "type": "method",
          "file_path": "src/fluen/generator/doc_generator.py",
          "line_number": 203,
          "scope": "private",
          "purpose": "Generates a summary Markdown document.",
          "documentation": "Compiles and writes a SUMMARY.md file to assist in navigation for rendered Markdown documentation."
        }
      ],
      "framework_hints": [
        "asyncio (implicit async usage for asynchronous operations)",
        "artifacts follow Python's typing hints for better type checking"
      ],
      "last_modified": "2024-11-13T17:49:20.875382",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "json",
          "pathlib.Path",
          "shutil",
          "logging",
          "fluen.generator.templates.template_manager.TemplateManager",
          "fluen.generator.manifest.ManifestGenerator",
          "fluen.generator.manifest.ProjectManifest",
          "fluen.generator.manifest.ElementReference"
        ],
        "imported_by": []
      }
    },
    "requirements.txt": {
      "path": "requirements.txt",
      "language": "Unknown",
      "purpose": "This file lists the dependencies required for a Python project, including their specific versions.",
      "exposures": [],
      "dependencies": [
        {
          "name": "click==8.1.7",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "coverage==7.6.4",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "exceptiongroup==1.2.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "iniconfig==2.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Jinja2==3.1.4",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "markdown-it-py==3.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "MarkupSafe==3.0.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mdurl==0.1.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "packaging==24.1",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pluggy==1.5.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "Pygments==2.18.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest==8.3.3",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest-asyncio==0.24.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest-cov==6.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "python-magic==0.4.27",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "PyYAML==6.0.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "rich==13.9.4",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "tomli==2.0.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing_extensions==4.12.2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mistralai==1.1.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "openai==1.43.0",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:49:36.265598",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "click==8.1.7",
          "coverage==7.6.4",
          "exceptiongroup==1.2.2",
          "iniconfig==2.0.0",
          "Jinja2==3.1.4",
          "markdown-it-py==3.0.0",
          "MarkupSafe==3.0.2",
          "mdurl==0.1.2",
          "packaging==24.1",
          "pluggy==1.5.0",
          "Pygments==2.18.0",
          "pytest==8.3.3",
          "pytest-asyncio==0.24.0",
          "pytest-cov==6.0.0",
          "python-magic==0.4.27",
          "PyYAML==6.0.2",
          "rich==13.9.4",
          "tomli==2.0.2",
          "typing_extensions==4.12.2",
          "mistralai==1.1.0",
          "openai==1.43.0"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/md/summary.md": {
      "path": "src/fluen/generator/templates/default/md/summary.md",
      "language": "Unknown",
      "purpose": "This code is a template script for generating documentation for a project. It aims to create structured documentation by organizing project files, identifying exposed elements, and linking them for easy reference.",
      "exposures": [
        {
          "name": "{% set project_overview = 'Project Overview' %}",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "README.md",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Project Structure",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Quick Links",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Reference Documentation",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "Jinja2",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/templates/default/md/readme.md"
          ]
        }
      ],
      "elements": [
        {
          "name": "project.name",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 3,
          "scope": "global",
          "purpose": "Represents the name of the project being documented.",
          "documentation": "If 'project.name' is provided, it is inserted into the documentation header. Defaults to 'Project' if undefined."
        },
        {
          "name": "groups.items",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 7,
          "scope": "global",
          "purpose": "Contains collections of file groups organized by language.",
          "documentation": "Used to iterate through and document files organized by programming language."
        },
        {
          "name": "files.items",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 18,
          "scope": "global",
          "purpose": "Contains a manifest of files to document with potential metadata about each file.",
          "documentation": "Used to generate reference documentation links and purpose descriptions for each documented file."
        },
        {
          "name": "file_manifest.purpose",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 22,
          "scope": "local",
          "purpose": "Holds brief descriptive text about a specific file's function or purpose.",
          "documentation": "This description is truncated to 100 characters for summary purposes in the documentation."
        },
        {
          "name": "file_manifest.exposures",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 25,
          "scope": "local",
          "purpose": "A list of public API elements exposed by a specific file.",
          "documentation": "Each exposure contains metadata like name and type to be listed in the documentation."
        },
        {
          "name": "generation_time",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 36,
          "scope": "global",
          "purpose": "Stores the date and time when the documentation is generated.",
          "documentation": "The value is inserted into the footer of the generated documentation."
        },
        {
          "name": "git_commit",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/summary.md",
          "line_number": 37,
          "scope": "global",
          "purpose": "Contains the short hash of the current Git commit.",
          "documentation": "This is included in the footer to indicate the code version at the time of documentation."
        }
      ],
      "framework_hints": [
        "Detected use of the Jinja2 template engine based on template syntax.",
        "Possible integration with Sphinx or a custom documentation generation tool."
      ],
      "last_modified": "2024-11-13T17:49:55.775867",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "Jinja2"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/static/script.js": {
      "path": "src/fluen/generator/templates/default/static/script.js",
      "language": "JavaScript",
      "purpose": "The code provides functionality for searching documentation and visualizing data through a lineage graph on a web page.",
      "exposures": [
        {
          "name": "DocumentationSearch",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "LineageGraph",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "d3",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "DocumentationSearch",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 3,
          "scope": "global",
          "purpose": "Handles the documentation search functionality, including loading the search index, managing user input, and displaying search results.",
          "documentation": "The class initializes search input elements, sets up keyboard shortcuts, and handles search index loading and user interactions for search functionality."
        },
        {
          "name": "initializeSearch",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 13,
          "scope": "DocumentationSearch",
          "purpose": "Initializes the search index by loading a manifest file dynamically.",
          "documentation": "Asynchronously loads a manifest file and builds a search index from it. Sets up event listeners for search input interactions."
        },
        {
          "name": "setupKeyboardShortcuts",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 9,
          "scope": "DocumentationSearch",
          "purpose": "Manages keyboard shortcuts for search operations.",
          "documentation": "Listens for '/' to focus the search input and 'Escape' to clear search results and blur input."
        },
        {
          "name": "_getManifestPath",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 44,
          "scope": "DocumentationSearch",
          "purpose": "Determines the path to the documentation manifest file.",
          "documentation": "Checks the current page path to correctly set the relative path to the manifest, depending on the context (reference page or index)."
        },
        {
          "name": "buildSearchIndex",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 50,
          "scope": "DocumentationSearch",
          "purpose": "Builds the search index from the loaded manifest.",
          "documentation": "Processes the manifest data to create an index that facilitates quick searching by path and elements."
        },
        {
          "name": "setupEventListeners",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 59,
          "scope": "DocumentationSearch",
          "purpose": "Sets up event listeners for search input focus and document click events.",
          "documentation": "Handles input events to trigger search operations and manages document clicks to hide search results when clicking outside the search area."
        },
        {
          "name": "handleSearch",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 67,
          "scope": "DocumentationSearch",
          "purpose": "Processes the search input and displays results.",
          "documentation": "Reads the search query and displays filtered search results based on the query entered by the user."
        },
        {
          "name": "performSearch",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 72,
          "scope": "DocumentationSearch",
          "purpose": "Executes the search operation on the index.",
          "documentation": "Matches the query against paths, purposes, and elements in the search index to find relevant results, limiting to 10."
        },
        {
          "name": "displayResults",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 97,
          "scope": "DocumentationSearch",
          "purpose": "Displays the search results in the UI.",
          "documentation": "Generates and injects HTML to present the search results and sets event handlers for result item clicks."
        },
        {
          "name": "handleResultClick",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 112,
          "scope": "DocumentationSearch",
          "purpose": "Handles clicks on search result items.",
          "documentation": "Navigates to the appropriate page or element in the documentation when a user clicks a search result."
        },
        {
          "name": "clearResults",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 125,
          "scope": "DocumentationSearch",
          "purpose": "Clears the current search results.",
          "documentation": "Empties the search results container and updates the UI state to reflect that no results are active."
        },
        {
          "name": "_escapeHtml",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 130,
          "scope": "DocumentationSearch",
          "purpose": "Escapes HTML characters for safe insertion into the result display.",
          "documentation": "Converts a string to a safe HTML format to prevent potential HTML injection vulnerabilities."
        },
        {
          "name": "LineageGraph",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 137,
          "scope": "global",
          "purpose": "Renders a lineage graph to visualize relationships between data nodes.",
          "documentation": "The class uses D3.js to render an interactive graph in a specified container, handling node and link interactions through event listeners."
        },
        {
          "name": "initializeGraph",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 143,
          "scope": "LineageGraph",
          "purpose": "Sets up the graph using D3 to create nodes and links.",
          "documentation": "Initializes an SVG graph area and sets up D3 force and drag simulations along with link and node definitions. Handles interactions like hover and drag."
        },
        {
          "name": "getNodeColor",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 214,
          "scope": "LineageGraph",
          "purpose": "Determines the color for graph nodes based on their type.",
          "documentation": "Returns a specific color code according to the type attribute of a node to visually differentiate node types."
        },
        {
          "name": "dragstarted",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 222,
          "scope": "LineageGraph",
          "purpose": "Starts the dragging interaction on a graph node.",
          "documentation": "Fixes position properties and restarts the simulation to allow a node to be freely moved using the mouse."
        },
        {
          "name": "dragged",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 229,
          "scope": "LineageGraph",
          "purpose": "Updates node position during dragging interaction.",
          "documentation": "Updates the position of a node as it is dragged across the graph. Adjusts fixed positions dynamically."
        },
        {
          "name": "dragended",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 234,
          "scope": "LineageGraph",
          "purpose": "Ends the dragging interaction on a graph node.",
          "documentation": "Releases the node to its final position, removing fixed coordinates and resetting the simulation state."
        },
        {
          "name": "handleNodeHover",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 239,
          "scope": "LineageGraph",
          "purpose": "Handles hover interaction on a graph node.",
          "documentation": "Enlarges the node size on hover to emphasize focus, creating a visual effect to enhance UX."
        },
        {
          "name": "handleNodeHoverEnd",
          "type": "method",
          "file_path": "src/fluen/generator/templates/default/static/script.js",
          "line_number": 245,
          "scope": "LineageGraph",
          "purpose": "Handles the end of a hover interaction on a graph node.",
          "documentation": "Reduces the node size when hover ends, reverting it back to its original size."
        }
      ],
      "framework_hints": [
        "D3.js",
        "JavaScript ES6 features"
      ],
      "last_modified": "2024-11-13T17:50:33.634786",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "d3"
        ],
        "imported_by": []
      }
    },
    "fluen_config.yml": {
      "path": "fluen_config.yml",
      "language": "Unknown",
      "purpose": "This configuration file is for setting up parameters for an application using GPT models via a provider like OpenAI.",
      "exposures": [
        {
          "name": "llm settings",
          "type": "exposure",
          "file_path": "fluen_config.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "output directories",
          "type": "exposure",
          "file_path": "fluen_config.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "cache directories",
          "type": "exposure",
          "file_path": "fluen_config.yml",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "openai",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/llm_providers/openai_provider.py"
          ]
        }
      ],
      "elements": [
        {
          "name": "cache_dir",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 1,
          "scope": "global",
          "purpose": "Specifies the directory where cache data is stored.",
          "documentation": "Defines the location of the cache used by the application."
        },
        {
          "name": "default_export_type",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 2,
          "scope": "global",
          "purpose": "Sets the default type for export operations.",
          "documentation": "Specifies the format in which data will be exported, defaulting to 'html'."
        },
        {
          "name": "llm",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 3,
          "scope": "global",
          "purpose": "Configuration block for the language model (LLM) settings.",
          "documentation": "Holds settings related to the interaction with the language model, including retries, model type, provider, and timeout."
        },
        {
          "name": "max_retries",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 4,
          "scope": "llm",
          "purpose": "Determines the number of retry attempts for a failed request.",
          "documentation": "Specifies the number of times a request to the LLM can be retried upon failure."
        },
        {
          "name": "model",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 5,
          "scope": "llm",
          "purpose": "Defines the specific version of the model to use.",
          "documentation": "Indicates which version of the GPT model is to be used (gpt-4o)."
        },
        {
          "name": "provider",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 6,
          "scope": "llm",
          "purpose": "Specifies the LLM service provider.",
          "documentation": "Dictates which service provider, such as OpenAI, will be supplying the LLM functionality."
        },
        {
          "name": "timeout",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 7,
          "scope": "llm",
          "purpose": "Sets the request timeout duration.",
          "documentation": "Specifies the maximum time in seconds to wait for a response from the LLM."
        },
        {
          "name": "api_key",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 8,
          "scope": "llm",
          "purpose": "Stores the API key for authentication.",
          "documentation": "Contains the secret API key used to authenticate requests to the LLM service."
        },
        {
          "name": "output_dir",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 9,
          "scope": "global",
          "purpose": "Designates the output directory for exported data.",
          "documentation": "The location where processed and exported data is saved."
        },
        {
          "name": "temp_dir",
          "type": "variable",
          "file_path": "fluen_config.yml",
          "line_number": 10,
          "scope": "global",
          "purpose": "Defines the temporary directory for intermediate data.",
          "documentation": "Stores temporary files used during the execution of the application."
        }
      ],
      "framework_hints": [
        "YAML format for configuration"
      ],
      "last_modified": "2024-11-13T17:50:50.689991",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "openai"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/md/reference.md": {
      "path": "src/fluen/generator/templates/default/md/reference.md",
      "language": "Unknown",
      "purpose": "This code serves as a template for generating documentation for a codebase, likely dynamically populated by a documentation generation tool.",
      "exposures": [
        {
          "name": "exposed_function_1",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/reference.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "exposed_class_1",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/reference.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "dependency_1",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dependency_2",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "exposed_function_1",
          "type": "function",
          "file_path": "src/fluen/generator/templates/default/md/reference.md",
          "line_number": 10,
          "scope": "public",
          "purpose": "This function handles specific tasks related to the public API of the service.",
          "documentation": "This function is part of the public API and is responsible for executing primary service logic."
        },
        {
          "name": "exposed_class_1",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/md/reference.md",
          "line_number": 25,
          "scope": "public",
          "purpose": "Represents a core component of the service.",
          "documentation": "This class encapsulates main features of the service and exposes interfaces for use."
        }
      ],
      "framework_hints": [
        "Jinja2",
        "Markdown",
        "Python"
      ],
      "last_modified": "2024-11-13T17:51:03.004466",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "dependency_1",
          "dependency_2"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/cross_referencer.py": {
      "path": "src/fluen/generator/cross_referencer.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to handle cross-referencing between documentation elements within a project, allowing for easy resolution and linking of references in documentation content.",
      "exposures": [
        {
          "name": "CrossReferenceResolver.__init__",
          "type": "exposure",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "CrossReferenceResolver.resolve_references",
          "type": "exposure",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "CrossReferenceResolver.get_incoming_references",
          "type": "exposure",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "CrossReferenceResolver.get_outgoing_references",
          "type": "exposure",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "CrossReferenceResolver.generate_reference_graph",
          "type": "exposure",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Dict",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/state/manager.py",
            "src/fluen/generator/manifest.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "typing.List",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/manifest.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "typing.Optional",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/state/manager.py",
            "src/fluen/generator/manifest.py",
            "src/fluen/orchestrator.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "typing.Set",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/manifest.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "typing.Tuple",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses.dataclass",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/state/manager.py",
            "src/fluen/generator/manifest.py"
          ]
        },
        {
          "name": "re",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/file_analyzer.py"
          ]
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ElementReference",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ProjectManifest",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "Reference",
          "type": "class",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 13,
          "scope": "global",
          "purpose": "Represents a reference to a documentation element.",
          "documentation": "This dataclass models a reference to an element in the documentation by storing its source and target filenames, name, type, and line number."
        },
        {
          "name": "CrossReferenceResolver",
          "type": "class",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 21,
          "scope": "global",
          "purpose": "Resolves and manages cross-references between documentation elements.",
          "documentation": "The CrossReferenceResolver class holds the logic for building a map of references, resolving them within content, and generating reference graphs."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 22,
          "scope": "CrossReferenceResolver",
          "purpose": "Initializes the CrossReferenceResolver with a given manifest.",
          "documentation": "Constructor for the CrossReferenceResolver class. Sets up the manifest, logger, and builds the reference map."
        },
        {
          "name": "_build_reference_map",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 27,
          "scope": "CrossReferenceResolver",
          "purpose": "Builds a map of all referenceable elements in the documentation.",
          "documentation": "This private method constructs the reference map by iterating through the project manifest's files and their exposures and elements."
        },
        {
          "name": "_add_reference",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 37,
          "scope": "CrossReferenceResolver",
          "purpose": "Adds a reference to the internal reference map.",
          "documentation": "Helper method to add a given documentation element as a reference to the reference map, including necessary details."
        },
        {
          "name": "resolve_references",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 47,
          "scope": "CrossReferenceResolver",
          "purpose": "Resolves references in the given content string and returns the modified content.",
          "documentation": "This public method replaces reference placeholders in the content with appropriate hyperlinks and returns any unresolved references."
        },
        {
          "name": "_find_best_reference",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 70,
          "scope": "CrossReferenceResolver",
          "purpose": "Determines the best reference to use from a list of possible references.",
          "documentation": "Private method to find the most appropriate reference for an element, preferring those within the current file."
        },
        {
          "name": "get_incoming_references",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 82,
          "scope": "CrossReferenceResolver",
          "purpose": "Retrieves all references pointing to elements in a specified file.",
          "documentation": "Returns a dictionary of names mapped to lists of References that point to elements within the specified file path."
        },
        {
          "name": "get_outgoing_references",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 96,
          "scope": "CrossReferenceResolver",
          "purpose": "Retrieves all references originating from the specified file.",
          "documentation": "Returns a dictionary of names mapped to lists of References that originate from elements within the specified file path and list their dependencies."
        },
        {
          "name": "generate_reference_graph",
          "type": "method",
          "file_path": "src/fluen/generator/cross_referencer.py",
          "line_number": 109,
          "scope": "CrossReferenceResolver",
          "purpose": "Generates a graph representing dependencies between files based on references.",
          "documentation": "Returns a dictionary representing a graph where keys are file paths and values are sets of file paths they depend on."
        }
      ],
      "framework_hints": [
        "dataclasses",
        "logging",
        "pathlib",
        "regular expressions (re)"
      ],
      "last_modified": "2024-11-13T17:51:31.391853",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "dataclasses.dataclass",
          "re",
          "logging",
          "fluen.generator.manifest.ElementReference",
          "fluen.generator.manifest.ProjectManifest"
        ],
        "imported_by": []
      }
    },
    "src/fluen/state/manager.py": {
      "path": "src/fluen/state/manager.py",
      "language": "Python",
      "purpose": "This module manages the state of a documentation generation process, allowing for saving, loading, and updating the state related to documentation tasks.",
      "exposures": [
        {
          "name": "DocumentationState",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "StateManager",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "load",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "save",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "update_progress",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "update_commit",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "set_manifest_path",
          "type": "exposure",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "json",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses.dataclass",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses.asdict",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/manifest.py"
          ]
        },
        {
          "name": "typing.Optional",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Dict",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Any",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/generator/manifest.py"
          ]
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "DocumentationState",
          "type": "class",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 11,
          "scope": "global",
          "purpose": "Represents the state of the documentation process.",
          "documentation": "A dataclass to store state attributes like commit hash, timestamp of last run, number of files processed, total files, and manifest path."
        },
        {
          "name": "last_commit",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 12,
          "scope": "DocumentationState",
          "purpose": "Stores the last commit hash processed.",
          "documentation": "An optional string to track the last processed commit hash in the documentation process."
        },
        {
          "name": "last_run_timestamp",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 13,
          "scope": "DocumentationState",
          "purpose": "Stores the timestamp of the last run.",
          "documentation": "An optional float that captures the timestamp of the last run of the documentation process."
        },
        {
          "name": "files_processed",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 14,
          "scope": "DocumentationState",
          "purpose": "Tracks the number of files processed.",
          "documentation": "An integer to count how many files have been processed in the documentation run."
        },
        {
          "name": "total_files",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 15,
          "scope": "DocumentationState",
          "purpose": "Stores the total number of files to process.",
          "documentation": "An integer indicating the total number of files expected in the documentation process."
        },
        {
          "name": "manifest_path",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 16,
          "scope": "DocumentationState",
          "purpose": "Stores path to the generated manifest file.",
          "documentation": "An optional string that holds the path to the manifest file created during documentation generation."
        },
        {
          "name": "StateManager",
          "type": "class",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 18,
          "scope": "global",
          "purpose": "Responsible for managing and persisting documentation process state.",
          "documentation": "Provides functionality to load and save the documentation state, and update various pieces of state data like files processed, commit hash, and manifest path."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 19,
          "scope": "StateManager",
          "purpose": "Initializes a StateManager instance.",
          "documentation": "Initializes the StateManager with a given state directory, sets up logging, and creates a default DocumentationState object."
        },
        {
          "name": "state_file",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 20,
          "scope": "StateManager",
          "purpose": "Stores the path to the state file.",
          "documentation": "A Path object representing the location of the state file within the state directory."
        },
        {
          "name": "logger",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 21,
          "scope": "StateManager",
          "purpose": "Handles logging for the StateManager.",
          "documentation": "A logger object used for logging debug and error information within the StateManager."
        },
        {
          "name": "current_state",
          "type": "variable",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 22,
          "scope": "StateManager",
          "purpose": "Stores the current documentation state.",
          "documentation": "An instance of DocumentationState holding the state data currently in use."
        },
        {
          "name": "load",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 24,
          "scope": "StateManager",
          "purpose": "Loads state from a file.",
          "documentation": "Attempts to load state data from the 'state.json' file into the current_state. If loading fails, returns a fresh DocumentationState object."
        },
        {
          "name": "save",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 35,
          "scope": "StateManager",
          "purpose": "Saves the current state to a file.",
          "documentation": "Dumps the current state data as a JSON object into the 'state.json' file, creating necessary directories if missing."
        },
        {
          "name": "update_progress",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 44,
          "scope": "StateManager",
          "purpose": "Updates the file processing progress.",
          "documentation": "Updates the number of files processed and the total number of files in the current state, then saves the state."
        },
        {
          "name": "update_commit",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 50,
          "scope": "StateManager",
          "purpose": "Updates the last commit processed.",
          "documentation": "Sets the last_commit field in the current state and saves it."
        },
        {
          "name": "set_manifest_path",
          "type": "method",
          "file_path": "src/fluen/state/manager.py",
          "line_number": 56,
          "scope": "StateManager",
          "purpose": "Sets the manifest file path.",
          "documentation": "Updates the manifest_path field with the given path and saves the current state."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:51:57.210903",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "json",
          "pathlib.Path",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "logging"
        ],
        "imported_by": []
      }
    },
    "src/fluen/cli.py": {
      "path": "src/fluen/cli.py",
      "language": "Python",
      "purpose": "This code defines a command-line interface (CLI) application using Click, designed to handle documentation generation and export tasks for a codebase, leveraging configuration data and interacting with a progression-enabled console output.",
      "exposures": [
        {
          "name": "cli",
          "type": "exposure",
          "file_path": "src/fluen/cli.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "docs",
          "type": "exposure",
          "file_path": "src/fluen/cli.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "generate",
          "type": "exposure",
          "file_path": "src/fluen/cli.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "export",
          "type": "exposure",
          "file_path": "src/fluen/cli.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "click",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.config.FluenConfig",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "rich.console.Console",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "rich.progress.Progress",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "fluen.orchestrator.Orchestrator",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.models.scan.ScanSelector",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "fluen.models.scan.ScanOptions",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "asyncio",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/file_analyzer.py",
            "src/fluen/orchestrator.py",
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "fluen.generator.doc_generator.DocumentationGenerator",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "fluen.generator.templates.template_manager.TemplateManager",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ManifestGenerator",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "FluenContext",
          "type": "class",
          "file_path": "src/fluen/cli.py",
          "line_number": 12,
          "scope": "global",
          "purpose": "Stores the configuration, console, and scan options relevant to the Fluen CLI commands.",
          "documentation": "A context object used in Click to maintain state across CLI commands. It initializes with a configuration file path, a console for rich text output, and optional scan options."
        },
        {
          "name": "pass_fluen_context",
          "type": "variable",
          "file_path": "src/fluen/cli.py",
          "line_number": 21,
          "scope": "global",
          "purpose": "Decorator to pass FluenContext instance to Click command functions.",
          "documentation": "This Click decorator passes a FluenContext object to functions, ensuring an instance is available for command operations."
        },
        {
          "name": "cli",
          "type": "function",
          "file_path": "src/fluen/cli.py",
          "line_number": 23,
          "scope": "global",
          "purpose": "Root command group for the CLI tool.",
          "documentation": "Defines the main command group for the CLI application. It sets up the configuration based on user input or default values."
        },
        {
          "name": "docs",
          "type": "function",
          "file_path": "src/fluen/cli.py",
          "line_number": 34,
          "scope": "cli",
          "purpose": "Sub-command group for documentation related commands.",
          "documentation": "Serves as a parent group for documentation commands like 'generate' and 'export'."
        },
        {
          "name": "generate",
          "type": "function",
          "file_path": "src/fluen/cli.py",
          "line_number": 39,
          "scope": "docs",
          "purpose": "Generates documentation for the provided codebase and outputs progress.",
          "documentation": "Handles the generation of documentation, managing repository and scan options. Utilizes an orchestrator for the generation process and provides progress updates via rich console."
        },
        {
          "name": "export",
          "type": "function",
          "file_path": "src/fluen/cli.py",
          "line_number": 93,
          "scope": "docs",
          "purpose": "Exports generated documentation into specified formats like HTML or Markdown.",
          "documentation": "Manages the exportation of documentation based on a manifest, using a progress bar to indicate stages such as manifest loading, template initialization, and export generation."
        }
      ],
      "framework_hints": [
        "Click",
        "Rich",
        "asyncio",
        "Python Type Hints"
      ],
      "last_modified": "2024-11-13T17:52:16.642966",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "click",
          "pathlib",
          "typing",
          "fluen.config.FluenConfig",
          "rich.console.Console",
          "rich.progress.Progress",
          "fluen.orchestrator.Orchestrator",
          "fluen.models.scan.ScanSelector",
          "fluen.models.scan.ScanOptions",
          "asyncio",
          "fluen.generator.doc_generator.DocumentationGenerator",
          "fluen.generator.templates.template_manager.TemplateManager",
          "fluen.generator.manifest.ManifestGenerator"
        ],
        "imported_by": []
      }
    },
    "setup.py": {
      "path": "setup.py",
      "language": "Python",
      "purpose": "This code serves as a setup script for a Python package named 'fluen'. It defines the package metadata, dependencies, and configurations required to distribute the package.",
      "exposures": [
        {
          "name": "fluen.cli:cli",
          "type": "exposure",
          "file_path": "setup.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "setuptools",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "click>=8.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "gitpython>=3.1.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pyyaml>=6.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "rich>=10.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "jinja2>=3.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "aiohttp>=3.8.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "openai>=1.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mistralai>=0.0.7",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest>=7.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest-asyncio>=0.21.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pytest-cov>=4.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "black>=23.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mypy>=1.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "flake8>=6.0.0",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "setup",
          "type": "function",
          "file_path": "setup.py",
          "line_number": 7,
          "scope": "global",
          "purpose": "Used to configure various aspects of the Python package.",
          "documentation": "The 'setup' function is part of 'setuptools' and is used to specify package metadata, dependencies, and configurations for distribution. Key parameters include: 'name', 'version', 'packages', 'python_requires', 'install_requires', 'extras_require', 'entry_points', and metadata such as 'author', 'description', etc."
        },
        {
          "name": "find_packages",
          "type": "function",
          "file_path": "setup.py",
          "line_number": 8,
          "scope": "global",
          "purpose": "Discovers all packages and sub-packages in a directory.",
          "documentation": "The 'find_packages' function is from 'setuptools' and automatically identifies packages and sub-packages by searching for '__init__.py' files in directories. It is used here with the 'where' argument set to 'src' to look for packages under the 'src' directory."
        },
        {
          "name": "long_description",
          "type": "variable",
          "file_path": "setup.py",
          "line_number": 4,
          "scope": "global",
          "purpose": "Holds the content of the README file for the package's long description.",
          "documentation": "The 'long_description' variable is assigned the contents of 'README.md', which is utilized in the metadata for more comprehensive package documentation."
        }
      ],
      "framework_hints": [
        "setuptools"
      ],
      "last_modified": "2024-11-13T17:52:32.533384",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "setuptools",
          "click>=8.0.0",
          "gitpython>=3.1.0",
          "pyyaml>=6.0",
          "rich>=10.0.0",
          "jinja2>=3.0.0",
          "aiohttp>=3.8.0",
          "openai>=1.0.0",
          "mistralai>=0.0.7",
          "pytest>=7.0.0",
          "pytest-asyncio>=0.21.0",
          "pytest-cov>=4.0.0",
          "black>=23.0.0",
          "mypy>=1.0.0",
          "flake8>=6.0.0"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/template_manager.py": {
      "path": "src/fluen/generator/templates/template_manager.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to manage a template system for documentation generation using Jinja2 templates.",
      "exposures": [
        {
          "name": "TemplateManager",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "jinja2",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "TemplateManager",
          "type": "class",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 9,
          "scope": "public",
          "purpose": "Manage the Jinja2 environment and render templates for documentation generation.",
          "documentation": "This class sets up template loaders, registers custom filters, and provides methods to render templates and get default context for template rendering."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 10,
          "scope": "private",
          "purpose": "Initialize the TemplateManager with custom or default template directory and prepare the Jinja environment.",
          "documentation": "The initializer sets up the template loaders, configures the environment with autoescaping and block trimming options, and registers custom filters for templates."
        },
        {
          "name": "_register_filters",
          "type": "method",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 28,
          "scope": "private",
          "purpose": "Register custom Jinja2 filters for use in templates.",
          "documentation": "This method adds custom filters to the Jinja environment such as 'format_type', 'anchor_id', and 'code_language'."
        },
        {
          "name": "_detect_language",
          "type": "method",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 35,
          "scope": "private",
          "purpose": "Determine the programming language based on the file extension for syntax highlighting.",
          "documentation": "This method uses a mapping of file extensions to language names to detect and return the appropriate language for syntax highlighting in templates."
        },
        {
          "name": "render_template",
          "type": "method",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 46,
          "scope": "public",
          "purpose": "Render a Jinja2 template using the provided context.",
          "documentation": "This method retrieves a template by name, renders it with the provided context, and returns the rendered template as a string. It logs an error and raises an exception if rendering fails."
        },
        {
          "name": "get_default_context",
          "type": "method",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 55,
          "scope": "public",
          "purpose": "Provide a default context for templates based on the ProjectManifest.",
          "documentation": "This method generates a default context dictionary using information from the ProjectManifest, including project details, generation time, and git commit."
        },
        {
          "name": "logger",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 11,
          "scope": "private",
          "purpose": "Log system for the TemplateManager to record errors and important events.",
          "documentation": "A logging.Logger instance initialized with the module's name for tracking operations and errors within the TemplateManager."
        },
        {
          "name": "env",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/template_manager.py",
          "line_number": 22,
          "scope": "private",
          "purpose": "Jinja2 environment instance for managing templates.",
          "documentation": "This instance of jinja2.Environment is configured with custom loaders and filter registrations to manage and render templates."
        }
      ],
      "framework_hints": [
        "jinja2",
        "logging"
      ],
      "last_modified": "2024-11-13T17:52:32.533661",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib",
          "typing",
          "jinja2",
          "logging"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/md/readme.md": {
      "path": "src/fluen/generator/templates/default/md/readme.md",
      "language": "Unknown",
      "purpose": "This code acts as a Jinja2 template for generating documentation for a software project. It creates a structured Markdown file with sections for project overview, project structure, dependencies, and navigation.",
      "exposures": [
        {
          "name": "Project Overview",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Project Structure",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Dependencies",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "Navigation",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "Jinja2",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "project.name",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 1,
          "scope": "global",
          "purpose": "Holds the name of the project.",
          "documentation": "Used to display the project name in the documentation. Defaults to 'Project' if not provided."
        },
        {
          "name": "project.primary_language",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 5,
          "scope": "global",
          "purpose": "Specifies the primary programming language of the project.",
          "documentation": "Displayed in the Project Overview section. Defaults to 'Not specified' if not set."
        },
        {
          "name": "project.frameworks",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 6,
          "scope": "global",
          "purpose": "Lists frameworks used in the project.",
          "documentation": "Displayed in the Project Overview section. It combines frameworks into a string separated by commas or defaults to 'None specified'."
        },
        {
          "name": "generation_time",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 7,
          "scope": "global",
          "purpose": "Records the last update time of the documentation generation.",
          "documentation": "Displayed in the Project Overview section. Defaults to 'Not specified'."
        },
        {
          "name": "git_commit",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 8,
          "scope": "global",
          "purpose": "Holds the current git commit hash of the project.",
          "documentation": "Displayed in the Project Overview section as an 8-character short form. Defaults to 'Unknown'."
        },
        {
          "name": "files_by_type",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 11,
          "scope": "global",
          "purpose": "Categorizes the project files by their type.",
          "documentation": "Used to generate a section for each file type, listing all files with links to their respective documentation pages."
        },
        {
          "name": "dependencies",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/md/readme.md",
          "line_number": 22,
          "scope": "global",
          "purpose": "Holds information about the project dependencies.",
          "documentation": "Used to render a table listing each dependency's name, type, version, and the files that use it, or defaults to 'No dependencies found'."
        }
      ],
      "framework_hints": [
        "Jinja2"
      ],
      "last_modified": "2024-11-13T17:52:52.027884",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "Jinja2"
        ],
        "imported_by": []
      }
    },
    "src/fluen/models/scan.py": {
      "path": "src/fluen/models/scan.py",
      "language": "Python",
      "purpose": "The code provides functionality for parsing, validating, and handling selectors for a scanning operation with options for selective scanning and forced execution.",
      "exposures": [
        {
          "name": "ScanSelector",
          "type": "exposure",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ScanOptions",
          "type": "exposure",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ScanSelector.is_path_selector",
          "type": "exposure",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ScanSelector.is_element_selector",
          "type": "exposure",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ScanOptions.is_selective_scan",
          "type": "exposure",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "ScanSelector",
          "type": "class",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 5,
          "scope": "public",
          "purpose": "Handles parsing and validation of scan selectors.",
          "documentation": "This class parses a selector string into type and value, validates it, and provides properties to query the selector type."
        },
        {
          "name": "ScanSelector.__init__",
          "type": "method",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 8,
          "scope": "public",
          "purpose": "Initializes a ScanSelector instance with parsing.",
          "documentation": "Constructor that takes a raw selector string, initializes attributes, and triggers parsing and validation."
        },
        {
          "name": "ScanSelector._parse_selector",
          "type": "method",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 15,
          "scope": "private",
          "purpose": "Parses the selector string into type and value components.",
          "documentation": "Internal method that splits the selector string by ':' and assigns the type and value. Raises ValueError on invalid format."
        },
        {
          "name": "ScanSelector._validate",
          "type": "method",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 26,
          "scope": "private",
          "purpose": "Validates the parsed selector type.",
          "documentation": "Checks if the selector type is within the set of valid types (e.g., 'path', 'element'). Returns True if valid, otherwise False."
        },
        {
          "name": "ScanSelector.is_path_selector",
          "type": "property",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 32,
          "scope": "public",
          "purpose": "Checks if the selector is of type 'path'.",
          "documentation": "Property that returns True if the selector type is 'path'."
        },
        {
          "name": "ScanSelector.is_element_selector",
          "type": "property",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 36,
          "scope": "public",
          "purpose": "Checks if the selector is of type 'element'.",
          "documentation": "Property that returns True if the selector type is 'element'."
        },
        {
          "name": "ScanOptions",
          "type": "class",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 40,
          "scope": "public",
          "purpose": "Container for scan options, including selector and force flag.",
          "documentation": "This class wraps scan options and provides a mechanism to manage an optional selector and a force flag for scan operations."
        },
        {
          "name": "ScanOptions.__init__",
          "type": "method",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 43,
          "scope": "public",
          "purpose": "Initializes a ScanOptions instance with optional selector and force flag.",
          "documentation": "Constructor that initializes the selector object if provided and sets the force flag."
        },
        {
          "name": "ScanOptions.is_selective_scan",
          "type": "property",
          "file_path": "src/fluen/models/scan.py",
          "line_number": 49,
          "scope": "public",
          "purpose": "Determines if the scan is selective based on selector presence.",
          "documentation": "Property that returns True if a selector is present, indicating a selective scan."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:53:21.469450",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib",
          "typing"
        ],
        "imported_by": []
      }
    },
    "src/fluen/llm_providers/__init__.py": {
      "path": "src/fluen/llm_providers/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:53:29.488292",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/tests/test_file_analyzer.py": {
      "path": "src/fluen/tests/test_file_analyzer.py",
      "language": "Python",
      "purpose": "Unit tests for file analysis functionality utilizing a mock LLM provider.",
      "exposures": [
        {
          "name": "test_analyze_file",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "test_analyze_binary_file",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "test_element_extraction",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pytest",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/tests/conftest.py",
            "src/fluen/tests/test_git_manager.py"
          ]
        },
        {
          "name": "unittest.mock",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "analyzer.file_analyzer",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "mock_llm_provider",
          "type": "function",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 10,
          "scope": "global",
          "purpose": "Create a mock LLM provider for testing.",
          "documentation": "This fixture creates a mock object for the LLM provider with a predefined asynchronous generate method."
        },
        {
          "name": "test_analyze_file",
          "type": "function",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 28,
          "scope": "global",
          "purpose": "Test the file analysis functionality for a valid Python file.",
          "documentation": "This test verifies that the FileAnalyzer correctly identifies elements within a Python file and returns a valid FileAnalysis object."
        },
        {
          "name": "test_analyze_binary_file",
          "type": "function",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 42,
          "scope": "global",
          "purpose": "Test the behavior of file analysis for binary files.",
          "documentation": "This test checks that the FileAnalyzer skips binary files and returns None for analysis."
        },
        {
          "name": "test_element_extraction",
          "type": "function",
          "file_path": "src/fluen/tests/test_file_analyzer.py",
          "line_number": 54,
          "scope": "global",
          "purpose": "Test the extraction process of code elements from a Python file.",
          "documentation": "This test ensures that the FileAnalyzer correctly identifies functions and classes within a Python file, verifying their types and line numbers."
        }
      ],
      "framework_hints": [
        "pytest",
        "unittest.mock (AsyncMock and Mock)"
      ],
      "last_modified": "2024-11-13T17:53:49.337702",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pytest",
          "unittest.mock",
          "analyzer.file_analyzer"
        ],
        "imported_by": []
      }
    },
    "src/fluen/llm_providers/ollama_provider.py": {
      "path": "src/fluen/llm_providers/ollama_provider.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to provide an implementation of a language model provider that interacts with an asynchronous HTTP API to generate text and retrieve embeddings using a specified language model.",
      "exposures": [
        {
          "name": "OllamaProvider",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "generate",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "get_embedding",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "json",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "aiohttp",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "BaseLLMProvider",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "OllamaProvider",
          "type": "class",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 7,
          "scope": "class-level",
          "purpose": "Implements methods to communicate with a remote language model service.",
          "documentation": "This class inherits from BaseLLMProvider and provides methods to generate text and get embeddings by interacting with a remote service through HTTP requests."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 8,
          "scope": "OllamaProvider",
          "purpose": "Initializes the OllamaProvider instance with configuration settings.",
          "documentation": "Sets up necessary configuration parameters like API base URL, model name, maximum retries, and timeout values for API requests."
        },
        {
          "name": "api_base_url",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 9,
          "scope": "OllamaProvider",
          "purpose": "Stores the base URL for API requests.",
          "documentation": "Initialized from the provided configuration, defaults to 'http://localhost:11434/api'."
        },
        {
          "name": "model",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 10,
          "scope": "OllamaProvider",
          "purpose": "Defines the model to be used for generating responses and embeddings.",
          "documentation": "Retrieved from the configuration, defaults to 'gemma'."
        },
        {
          "name": "max_retries",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 11,
          "scope": "OllamaProvider",
          "purpose": "Specifies the maximum number of retries for API requests.",
          "documentation": "Configured through the initialization configuration, defaults to 3 retries."
        },
        {
          "name": "timeout",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 12,
          "scope": "OllamaProvider",
          "purpose": "Sets the request timeout duration in seconds.",
          "documentation": "Configured through the initialization configuration, defaults to 60 seconds."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 14,
          "scope": "OllamaProvider",
          "purpose": "Generates text based on a given prompt.",
          "documentation": "Makes an asynchronous POST request to the /generate API endpoint with the provided prompt and retrieves the generated text."
        },
        {
          "name": "get_embedding",
          "type": "method",
          "file_path": "src/fluen/llm_providers/ollama_provider.py",
          "line_number": 26,
          "scope": "OllamaProvider",
          "purpose": "Retrieves the embedding for a given text.",
          "documentation": "Makes an asynchronous POST request to the /embeddings API endpoint with the provided text and retrieves the corresponding embedding."
        }
      ],
      "framework_hints": [
        "aiohttp",
        "asyncio",
        "Python type hinting"
      ],
      "last_modified": "2024-11-13T17:54:02.187307",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "json",
          "aiohttp",
          "typing",
          "BaseLLMProvider"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/manifest.py": {
      "path": "src/fluen/generator/manifest.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to generate a manifest file for a project, which includes detailed information about files, their dependencies, relationships, and other metadata. This manifest can be saved in both JSON and JSONP formats.",
      "exposures": [
        {
          "name": "ManifestGenerator",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "DependencyInfo",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ElementReference",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FileRelationships",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "FileManifest",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ProjectManifest",
          "type": "exposure",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Dict",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.List",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Any",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Optional",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Set",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses.dataclass",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses.asdict",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "json",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "datetime.datetime",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.analyzer.file_analyzer.FileAnalysis",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/project_analyzer.py"
          ]
        }
      ],
      "elements": [
        {
          "name": "DependencyInfo",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 11,
          "scope": "global",
          "purpose": "Represents a dependency with information such as name, type, version, and usage across files.",
          "documentation": "Stores the details of a dependency, including which files use it."
        },
        {
          "name": "ElementReference",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 18,
          "scope": "global",
          "purpose": "Represents a code element reference, including details like name, type, file path, line number, etc.",
          "documentation": "Used to track different elements within the files such as functions, classes, or variables."
        },
        {
          "name": "FileRelationships",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 27,
          "scope": "global",
          "purpose": "Tracks the relationships of a file with other files, including which files it depends on and which files depend on it.",
          "documentation": "Maintains a record of imports and dependencies for each file."
        },
        {
          "name": "FileManifest",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 34,
          "scope": "global",
          "purpose": "Represents metadata about a file, including its path, language, purpose, dependencies, and relationships with other files.",
          "documentation": "Holds detailed information about a single file in the context of the project."
        },
        {
          "name": "ProjectManifest",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 46,
          "scope": "global",
          "purpose": "Stores the entire project metadata, including language, frameworks, files, dependencies, and more.",
          "documentation": "Collects comprehensive data about the project, combining individual file manifests."
        },
        {
          "name": "ManifestGenerator",
          "type": "class",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 56,
          "scope": "global",
          "purpose": "Handles the creation, updating, and saving of project manifests.",
          "documentation": "This is the core class responsible for managing the project manifest lifecycle, including initialization, updates, and saving."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 57,
          "scope": "ManifestGenerator",
          "purpose": "Initializes the ManifestGenerator with project and output directories.",
          "documentation": "Sets up paths and logger for managing the manifest."
        },
        {
          "name": "initialize_manifest",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 65,
          "scope": "ManifestGenerator",
          "purpose": "Creates a new ProjectManifest instance with given project name and git commit.",
          "documentation": "Sets up the initial manifest structure for a project to start adding files and dependencies."
        },
        {
          "name": "load_existing_manifest",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 78,
          "scope": "ManifestGenerator",
          "purpose": "Attempts to load an existing manifest from disk.",
          "documentation": "Checks for an existing manifest file and loads its content into the ProjectManifest instance."
        },
        {
          "name": "add_file_analysis",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 89,
          "scope": "ManifestGenerator",
          "purpose": "Adds or updates the analysis of a file in the project manifest and tracks relationships.",
          "documentation": "Incorporates file analysis results into the project manifest, updating file and project-level metadata."
        },
        {
          "name": "_update_project_information",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 130,
          "scope": "ManifestGenerator",
          "purpose": "Updates project-level metadata based on file manifest information.",
          "documentation": "Adjusts overarching project details such as primary language and framework usage with new file data."
        },
        {
          "name": "_update_relationships",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 148,
          "scope": "ManifestGenerator",
          "purpose": "Maintains the file dependency graph by updating dependencies for a given file path.",
          "documentation": "Updates the internal relationship graph to reflect dependencies and dependents for a file."
        },
        {
          "name": "_resolve_dependencies",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 175,
          "scope": "ManifestGenerator",
          "purpose": "Resolves file dependencies, especially relative imports, into concrete file paths.",
          "documentation": "Converts relative import paths into absolute ones that can be mapped within the project structure."
        },
        {
          "name": "get_file_relationships",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 194,
          "scope": "ManifestGenerator",
          "purpose": "Retrieves relationship data for a specific file.",
          "documentation": "Returns a structured representation of how a file relates to others in terms of dependencies and dependents."
        },
        {
          "name": "_get_display_name",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 218,
          "scope": "ManifestGenerator",
          "purpose": "Provides a shortened display name for a file path.",
          "documentation": "Transforms full file paths into simpler, more readable strings for display purposes."
        },
        {
          "name": "save",
          "type": "method",
          "file_path": "src/fluen/generator/manifest.py",
          "line_number": 223,
          "scope": "ManifestGenerator",
          "purpose": "Saves the current project manifest in both JSON and JSONP formats.",
          "documentation": "Writes the manifest to disk, ensuring directories are present and formats are correctly structured."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:54:26.635081",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Set",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "json",
          "logging",
          "datetime.datetime",
          "fluen.analyzer.file_analyzer.FileAnalysis"
        ],
        "imported_by": []
      }
    },
    "src/fluen/tests/conftest.py": {
      "path": "src/fluen/tests/conftest.py",
      "language": "Python",
      "purpose": "This code provides PyTest fixtures for setting up testing environments such as temporary file systems, sample Git repositories, and mock configurations.",
      "exposures": [
        {
          "name": "temp_dir",
          "type": "exposure",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "sample_repo",
          "type": "exposure",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "mock_config",
          "type": "exposure",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pytest",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "tempfile",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "shutil",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "git",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "config",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "temp_dir",
          "type": "function",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 11,
          "scope": "module-level",
          "purpose": "Provides a temporary directory for tests.",
          "documentation": "This fixture sets up a temporary directory using Python's tempfile module and yields the Path object of the directory, ensuring cleanup afterwards."
        },
        {
          "name": "sample_repo",
          "type": "function",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 16,
          "scope": "module-level",
          "purpose": "Creates a sample Git repository within a temporary directory for testing purposes.",
          "documentation": "This fixture initializes a Git repository, populates it with sample files and commits, then yields the directory Path."
        },
        {
          "name": "mock_config",
          "type": "function",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 57,
          "scope": "module-level",
          "purpose": "Creates a mock configuration object for testing.",
          "documentation": "This fixture returns a FluenConfig instance initialized with a mock LLMConfig and various directory paths."
        },
        {
          "name": "FluenConfig",
          "type": "class",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 9,
          "scope": "external dependency",
          "purpose": "Configuration class used within the mock_config fixture.",
          "documentation": "Represents application configurations, presumably imported from the config module."
        },
        {
          "name": "LLMConfig",
          "type": "class",
          "file_path": "src/fluen/tests/conftest.py",
          "line_number": 9,
          "scope": "external dependency",
          "purpose": "Configuration class for LLM provider details used within mock_config.",
          "documentation": "Holds details about the LLM service provider and model information, imported from the config module."
        }
      ],
      "framework_hints": [
        "pytest"
      ],
      "last_modified": "2024-11-13T17:54:34.183543",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pytest",
          "pathlib",
          "tempfile",
          "shutil",
          "git",
          "typing",
          "config"
        ],
        "imported_by": []
      }
    },
    "src/fluen/models/__init__.py": {
      "path": "src/fluen/models/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:54:53.452292",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "LICENSE": {
      "path": "LICENSE",
      "language": "Unknown",
      "purpose": "The primary purpose of this text is to provide the full terms and conditions of the Apache License, Version 2.0, which is a widely used open source software license.",
      "exposures": [],
      "dependencies": [],
      "elements": [
        {
          "name": "License",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 5,
          "scope": "global",
          "purpose": "Defines the scope and terms of the license.",
          "documentation": "License terms define conditions for use, reproduction, and distribution."
        },
        {
          "name": "Licensor",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 11,
          "scope": "global",
          "purpose": "Denotes the copyright owner or authorized entity granting the license.",
          "documentation": "Identifies the party granting rights under the license."
        },
        {
          "name": "Legal Entity",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 14,
          "scope": "global",
          "purpose": "Defines the entities controlled by or under common control with the acting entity.",
          "documentation": "Specifies the parties considered part of the 'entity' in the context of the license."
        },
        {
          "name": "You",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 20,
          "scope": "global",
          "purpose": "Refers to the individual or entity exercising permissions.",
          "documentation": "Identifies the party who is the licensee of rights under this license."
        },
        {
          "name": "Source",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 23,
          "scope": "global",
          "purpose": "Refers to the preferred form for making modifications.",
          "documentation": "Defines what constitutes 'source' form under the license."
        },
        {
          "name": "Object",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 27,
          "scope": "global",
          "purpose": "Refers to any mechanically transformed form of the source.",
          "documentation": "Defines the form resulting from transformations like compilation."
        },
        {
          "name": "Work",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 32,
          "scope": "global",
          "purpose": "Defines the work under the license.",
          "documentation": "Work of authorship covered by the license, indicated by a copyright notice."
        },
        {
          "name": "Derivative Works",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 37,
          "scope": "global",
          "purpose": "Refers to works based on the original work.",
          "documentation": "Works that are modifications or extensions of the original work."
        },
        {
          "name": "Contribution",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 44,
          "scope": "global",
          "purpose": "Denotes any work submitted to be included in the original work.",
          "documentation": "Work submitted for inclusion in the main work by a copyright owner or authorized entity."
        },
        {
          "name": "Contributor",
          "type": "definition",
          "file_path": "LICENSE",
          "line_number": 53,
          "scope": "global",
          "purpose": "Identifies individuals or entities submitting contributions.",
          "documentation": "Entities or individuals granting rights to their contributions."
        },
        {
          "name": "Grant of Copyright License",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 57,
          "scope": "global",
          "purpose": "Describes the copyright rights granted.",
          "documentation": "Outlines permissions granted for reproduction, distribution, etc."
        },
        {
          "name": "Grant of Patent License",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 65,
          "scope": "global",
          "purpose": "Describes the patent rights granted.",
          "documentation": "Details rights regarding the use and sale of the work."
        },
        {
          "name": "Redistribution",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 75,
          "scope": "global",
          "purpose": "Specifies terms for redistributing the work.",
          "documentation": "Outlines conditions under which the work and derivatives can be redistributed."
        },
        {
          "name": "Submission of Contributions",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 107,
          "scope": "global",
          "purpose": "Describes terms around contributions to the work.",
          "documentation": "Defines terms for submitting contributions to the main work."
        },
        {
          "name": "Trademarks",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 114,
          "scope": "global",
          "purpose": "Clarifies trademark rights.",
          "documentation": "States that the license does not grant rights to use trademarks of the Licensor."
        },
        {
          "name": "Disclaimer of Warranty",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 119,
          "scope": "global",
          "purpose": "Denies warranty and liability responsibilities.",
          "documentation": "Offers the work 'as is' with no warranties."
        },
        {
          "name": "Limitation of Liability",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 127,
          "scope": "global",
          "purpose": "Limits liability for any damages that arise.",
          "documentation": "Protects contributors from liability for damages incurred from using the work."
        },
        {
          "name": "Accepting Warranty or Additional Liability",
          "type": "section",
          "file_path": "LICENSE",
          "line_number": 138,
          "scope": "global",
          "purpose": "Rules for offering warranty or liability.",
          "documentation": "Allows redistributors to offer support or warranties at their own risk."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:54:53.453123",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/analyzer/file_analyzer.py": {
      "path": "src/fluen/analyzer/file_analyzer.py",
      "language": "Python",
      "purpose": "File in analyzer module",
      "exposures": [],
      "dependencies": [
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "re",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "dataclasses",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mimetypes",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "json",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "asyncio",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "time",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/orchestrator.py"
          ]
        },
        {
          "name": "git",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:56:07.421406",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib",
          "re",
          "typing",
          "dataclasses",
          "logging",
          "mimetypes",
          "json",
          "asyncio",
          "time",
          "git",
          "fluen"
        ],
        "imported_by": []
      }
    },
    "src/fluen/analyzer/__init__.py": {
      "path": "src/fluen/analyzer/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:56:29.265261",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    ".fluen/cache/state.json": {
      "path": ".fluen/cache/state.json",
      "language": "Unknown",
      "purpose": "This JSON object represents metadata for a project, possibly for tracking purposes in version control or build systems.",
      "exposures": [
        {
          "name": "last_commit",
          "type": "exposure",
          "file_path": ".fluen/cache/state.json",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "last_run_timestamp",
          "type": "exposure",
          "file_path": ".fluen/cache/state.json",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "files_processed",
          "type": "exposure",
          "file_path": ".fluen/cache/state.json",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "total_files",
          "type": "exposure",
          "file_path": ".fluen/cache/state.json",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "manifest_path",
          "type": "exposure",
          "file_path": ".fluen/cache/state.json",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [],
      "elements": [
        {
          "name": "last_commit",
          "type": "variable",
          "file_path": ".fluen/cache/state.json",
          "line_number": 1,
          "scope": "global",
          "purpose": "To store the hash of the latest commit in the repository.",
          "documentation": "This is a string representing the SHA-1 hash of the most recent commit."
        },
        {
          "name": "last_run_timestamp",
          "type": "variable",
          "file_path": ".fluen/cache/state.json",
          "line_number": 2,
          "scope": "global",
          "purpose": "To store the timestamp of the last time a particular process was run.",
          "documentation": "This is expected to hold a timestamp in a set format, currently null indicating that the process has not run yet."
        },
        {
          "name": "files_processed",
          "type": "variable",
          "file_path": ".fluen/cache/state.json",
          "line_number": 3,
          "scope": "global",
          "purpose": "To indicate how many files have been processed so far.",
          "documentation": "An integer value representing the number of files processed within the context this metadata is tracking."
        },
        {
          "name": "total_files",
          "type": "variable",
          "file_path": ".fluen/cache/state.json",
          "line_number": 4,
          "scope": "global",
          "purpose": "To indicate the total number of files that are supposed to be processed.",
          "documentation": "An integer value representing the total number of files intended to be processed for the current operation."
        },
        {
          "name": "manifest_path",
          "type": "variable",
          "file_path": ".fluen/cache/state.json",
          "line_number": 5,
          "scope": "global",
          "purpose": "To store the path to a manifest file, if applicable.",
          "documentation": "This is currently null and presumably expected to hold a string path to a project's manifest file."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:56:29.265561",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/html/index.html": {
      "path": "src/fluen/generator/templates/default/html/index.html",
      "language": "Unknown",
      "purpose": "The primary purpose of this code is to generate an HTML page for project documentation with a focus on providing navigation and information about the project, including file references and dependencies.",
      "exposures": [
        {
          "name": "sidebar",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "main-content",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "search-input",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "project-info",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "dependencies-section",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "d3.js",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "<!DOCTYPE html>",
          "type": "document_type_declaration",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 1,
          "scope": "global",
          "purpose": "Specifies the document type and version of HTML used.",
          "documentation": "Indicates the use of HTML5 for this document."
        },
        {
          "name": "<html lang=\"en\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 2,
          "scope": "global",
          "purpose": "Defines the root of an HTML document and sets the language to English.",
          "documentation": "This tag encloses all other HTML content and sets the language attribute."
        },
        {
          "name": "<head>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 3,
          "scope": "global",
          "purpose": "Contains metadata and links to resources related to the HTML document.",
          "documentation": "Holds the document metadata including character set, viewport settings, title, and stylesheet link."
        },
        {
          "name": "<title>{{ project.name }} Documentation</title>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 6,
          "scope": "head",
          "purpose": "Sets the title of the HTML document, dynamically populated with the project's name.",
          "documentation": "Uses a templating engine to insert the project's name into the title element."
        },
        {
          "name": "<link>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 7,
          "scope": "head",
          "purpose": "Links a CSS stylesheet for styling the HTML document.",
          "documentation": "Dynamically determines the CSS file path based on the 'is_reference' condition."
        },
        {
          "name": "<body>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 9,
          "scope": "global",
          "purpose": "Contains the main content of the HTML document.",
          "documentation": "Encloses all visible elements of the webpage, including the sidebar and main content."
        },
        {
          "name": "<div class=\"sidebar\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 10,
          "scope": "body",
          "purpose": "Provides a navigation sidebar displaying project information and file links.",
          "documentation": "Includes project name, primary language, and a list of files categorized by type."
        },
        {
          "name": "{% for type, files in files_by_type.items()|default({}.items()) %}",
          "type": "template_tag",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 17,
          "scope": "sidebar-content",
          "purpose": "Iterates over file groups, executing code for each group.",
          "documentation": "Jinja2 template loop that iterates over file types and lists files associated with each type."
        },
        {
          "name": "<div class=\"main-content\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 29,
          "scope": "body",
          "purpose": "Holds the primary content of the webpage, including the header, search function, and project metadata.",
          "documentation": "Contains elements for searching the documentation and displaying detailed project information."
        },
        {
          "name": "<input type=\"text\" class=\"search-input\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 33,
          "scope": "main-header",
          "purpose": "Provides a text input for searching the documentation.",
          "documentation": "Search box with placeholder text that gains focus when '/' is pressed."
        },
        {
          "name": "{{ project.name }}",
          "type": "template_variable",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 40,
          "scope": "project-info",
          "purpose": "Dynamically inserts the project's name into the HTML.",
          "documentation": "Uses a templating language to populate the page with the project's name where specified."
        },
        {
          "name": "<section class=\"dependencies-section\">",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 48,
          "scope": "main-content",
          "purpose": "Displays a table of the project's dependencies.",
          "documentation": "Includes a table listing dependency names, types, versions, and files that use them."
        },
        {
          "name": "{% for name, dep in dependencies.items()|default({}.items()) %}",
          "type": "template_tag",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 55,
          "scope": "dependencies-section",
          "purpose": "Iterates over the project dependencies to generate HTML table rows.",
          "documentation": "Jinja2 loop that dynamically generates a table listing project dependencies."
        },
        {
          "name": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\"></script>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 73,
          "scope": "body",
          "purpose": "Imports the D3.js library for potential data-driven document manipulations.",
          "documentation": "Includes an external D3.js script, a JavaScript library for visualizations and data manipulation."
        },
        {
          "name": "<script src=\"assets/script.js\"></script>",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/html/index.html",
          "line_number": 74,
          "scope": "body",
          "purpose": "Links a local JavaScript file for executing additional client-side logic.",
          "documentation": "Includes a local script file for augmenting the functionality of the documentation page."
        }
      ],
      "framework_hints": [
        "Jinja2"
      ],
      "last_modified": "2024-11-13T17:57:01.056457",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "d3.js"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/html/reference.html": {
      "path": "src/fluen/generator/templates/default/html/reference.html",
      "language": "Unknown",
      "purpose": "This HTML code serves as a template for generating a documentation page for a project file. It provides structural representation and displays file metadata, project information, dependencies, and elements with interactive navigation.",
      "exposures": [
        {
          "name": "sidebar-header",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "element-navigation",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "search-container",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "file-header",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "dependencies-section",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "lineage-section",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "elements-section",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "d3.js (from https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js)",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "stylesheet (from ../assets/styles.css)",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "script (from ../assets/script.js)",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "<html>",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 1,
          "scope": "global",
          "purpose": "Defines the root of an HTML document.",
          "documentation": "The <html> element represents the root of an HTML or XHTML document. All other elements must be descendants of this element."
        },
        {
          "name": "<head>",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 2,
          "scope": "global",
          "purpose": "Contains metadata/information for the document.",
          "documentation": "The <head> element can contain a <title> element, style or link to CSS, metadata, and script references."
        },
        {
          "name": "<title>",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 6,
          "scope": "global",
          "purpose": "Specifies a title for the document displayed in the browser's title bar or tab.",
          "documentation": "Dynamically generates the document's title using the file path and project name."
        },
        {
          "name": "<link>",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 7,
          "scope": "global",
          "purpose": "Links an external stylesheet to the HTML document.",
          "documentation": "The <link> element specifies the relationship between the current document and an external resource (stylesheet in this case)."
        },
        {
          "name": "<body>",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 8,
          "scope": "global",
          "purpose": "Represents the document's body and contains all contents such as text, images, links, etc.",
          "documentation": "Encompasses the visible content of the document, including sections for sidebar, main content, and various elements."
        },
        {
          "name": "<div class=\"sidebar\">",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 9,
          "scope": "global",
          "purpose": "Defines a container for the sidebar, displaying project information and navigation.",
          "documentation": "The sidebar contains a header with project information and a navigation section with links to different elements in the documentation."
        },
        {
          "name": "<input type=\"text\" class=\"search-input\">",
          "type": "tag",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 30,
          "scope": "global",
          "purpose": "An input field for searching the documentation.",
          "documentation": "Allows users to search within the documentation by typing keywords. Automatically gains focus when '/' is pressed."
        },
        {
          "name": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\"></script>",
          "type": "external resource",
          "file_path": "src/fluen/generator/templates/default/html/reference.html",
          "line_number": 76,
          "scope": "global",
          "purpose": "Includes the D3.js library for data visualization.",
          "documentation": "Loads the D3.js library, which might be used for rendering interactive data visualizations like graphs."
        }
      ],
      "framework_hints": [
        "Jinja2 template engine (indicated by use of {{ }} for variable interpolation and {% %} for control structures)"
      ],
      "last_modified": "2024-11-13T17:57:21.609799",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "d3.js (from https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js)",
          "stylesheet (from ../assets/styles.css)",
          "script (from ../assets/script.js)"
        ],
        "imported_by": []
      }
    },
    "src/fluen/llm_providers/openai_provider.py": {
      "path": "src/fluen/llm_providers/openai_provider.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to serve as a provider for interacting with OpenAI's APIs to generate text and retrieve embeddings using asynchronous operations.",
      "exposures": [
        {
          "name": "OpenAIProvider",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "openai",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "base_provider",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/llm_providers/mistral_ai_provider.py"
          ]
        }
      ],
      "elements": [
        {
          "name": "OpenAIProvider",
          "type": "class",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 6,
          "scope": "global",
          "purpose": "Serves as an interface to interact with OpenAI's API for generating text and retrieving embeddings.",
          "documentation": "The OpenAIProvider class inherits from BaseLLMProvider and provides asynchronous methods to communicate with OpenAI's services for generating text completions and fetching text embeddings."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 7,
          "scope": "OpenAIProvider",
          "purpose": "Initializes the OpenAIProvider with configuration for the API client.",
          "documentation": "The constructor method for OpenAIProvider which sets up the AsyncOpenAI client using the provided API key and model from the configuration dictionary."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 12,
          "scope": "OpenAIProvider",
          "purpose": "Asynchronously generates a text completion based on the given prompt.",
          "documentation": "The generate method takes a prompt string and uses the OpenAI API to generate a text completion asynchronously, returning the completion as a string."
        },
        {
          "name": "get_embedding",
          "type": "method",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 18,
          "scope": "OpenAIProvider",
          "purpose": "Asynchronously retrieves the embedding for a given text input.",
          "documentation": "The get_embedding method uses the OpenAI API to obtain an embedding for the provided text, returning the embedding as a list of floats asynchronously."
        },
        {
          "name": "self.client",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 8,
          "scope": "OpenAIProvider",
          "purpose": "Holds the AsyncOpenAI client instance used for API interactions.",
          "documentation": "Instance variable initialized to manage API requests via the AsyncOpenAI class, requiring an API key."
        },
        {
          "name": "self.model",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/openai_provider.py",
          "line_number": 9,
          "scope": "OpenAIProvider",
          "purpose": "Holds the model name identifier to be used in API calls.",
          "documentation": "Instance variable representing the model to use for API requests, defaulting to 'gpt-3.5-turbo' if not provided."
        }
      ],
      "framework_hints": [
        "AsyncIO"
      ],
      "last_modified": "2024-11-13T17:57:36.051069",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "openai",
          "typing",
          "base_provider"
        ],
        "imported_by": []
      }
    },
    "src/fluen/orchestrator.py": {
      "path": "src/fluen/orchestrator.py",
      "language": "Python",
      "purpose": "The primary purpose of this code is to orchestrate the process of generating documentation for a codebase. It manages the various stages of this process, such as initializing a repository, analyzing the codebase, and generating documentation.",
      "exposures": [
        {
          "name": "Orchestrator",
          "type": "exposure",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "ProcessManager",
          "type": "exposure",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "main",
          "type": "exposure",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "asyncio",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Optional",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "time",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "rich.console.Console",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "rich.progress.Progress",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.models.scan.ScanOptions",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.models.scan.ScanSelector",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.llm_providers.base_provider.BaseLLMProvider",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.config.FluenConfig",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.git_integration.manager.GitManager",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "fluen.state.manager.StateManager",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "fluen.analyzer.file_analyzer.FileAnalyzer",
          "type": "external",
          "version": null,
          "used_by": [
            "src/fluen/analyzer/project_analyzer.py"
          ]
        },
        {
          "name": "fluen.analyzer.project_analyzer.ProjectAnalyzer",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ManifestGenerator",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ProjectManifest",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.doc_generator.DocumentationGenerator",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.templates.template_manager.TemplateManager",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.cross_referencer.CrossReferenceResolver",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "Orchestrator",
          "type": "class",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 27,
          "scope": "public",
          "purpose": "Manages the overall process of documentation generation.",
          "documentation": "The Orchestrator class initializes required components and orchestrates various steps to generate documentation for a project. It handles repository initialization, code analysis, and documentation generation."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 28,
          "scope": "public",
          "purpose": "Constructor for the Orchestrator class.",
          "documentation": "Initializes the Orchestrator with configuration settings and sets up necessary components like GitManager, StateManager, and TemplateManager."
        },
        {
          "name": "generate_documentation",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 38,
          "scope": "public",
          "purpose": "Main method to start the documentation generation process.",
          "documentation": "Handles the complete flow of generating documentation including repository setup, file analysis, and documentation export."
        },
        {
          "name": "_initialize_repository",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 133,
          "scope": "private",
          "purpose": "Initializes the Git repository for analysis.",
          "documentation": "Clones or initializes the repository needed for documentation generation based on provided URL or default settings."
        },
        {
          "name": "_run_analysis",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 147,
          "scope": "private",
          "purpose": "Executes project analysis as part of the documentation generation.",
          "documentation": "Performs analysis on the repository using specified analyzers and updates progress accordingly."
        },
        {
          "name": "_run_selective_analysis",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 161,
          "scope": "private",
          "purpose": "Runs a selective analysis based on the provided ScanSelector.",
          "documentation": "Performs targeted analysis on specific parts of the codebase as defined by the scan options."
        },
        {
          "name": "_generate_docs",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 181,
          "scope": "private",
          "purpose": "Generates documentation from the analysis results stored in the project manifest.",
          "documentation": "Uses a documentation generator to produce documentation output based on analysis results."
        },
        {
          "name": "_create_llm_provider",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 204,
          "scope": "private",
          "purpose": "Creates an LLM provider instance utilizing the LLMProviderFactory.",
          "documentation": "Instantiates and configures a language model provider based on the configuration settings."
        },
        {
          "name": "ProcessManager",
          "type": "class",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 212,
          "scope": "public",
          "purpose": "Static management for running the documentation generation process.",
          "documentation": "Provides a static method to run the documentation generation process with specified configuration."
        },
        {
          "name": "run",
          "type": "method",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 213,
          "scope": "public",
          "purpose": "Runs the documentation generation process with a provided configuration path.",
          "documentation": "Loads configuration and initiates the Orchestrator to start the documentation generation."
        },
        {
          "name": "main",
          "type": "function",
          "file_path": "src/fluen/orchestrator.py",
          "line_number": 224,
          "scope": "public",
          "purpose": "Entry point for running the process from the command line.",
          "documentation": "Parses command-line arguments for configuration path and initiates the process using asyncio."
        }
      ],
      "framework_hints": [
        "Python: asyncio, rich for async operations and console progress updates"
      ],
      "last_modified": "2024-11-13T17:58:04.783917",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "asyncio",
          "pathlib.Path",
          "typing.Optional",
          "logging",
          "time",
          "rich.console.Console",
          "rich.progress.Progress",
          "fluen.models.scan.ScanOptions",
          "fluen.models.scan.ScanSelector",
          "fluen.llm_providers.base_provider.BaseLLMProvider",
          "fluen.config.FluenConfig",
          "fluen.git_integration.manager.GitManager",
          "fluen.state.manager.StateManager",
          "fluen.analyzer.file_analyzer.FileAnalyzer",
          "fluen.analyzer.project_analyzer.ProjectAnalyzer",
          "fluen.generator.manifest.ManifestGenerator",
          "fluen.generator.manifest.ProjectManifest",
          "fluen.generator.doc_generator.DocumentationGenerator",
          "fluen.generator.templates.template_manager.TemplateManager",
          "fluen.generator.cross_referencer.CrossReferenceResolver"
        ],
        "imported_by": []
      }
    },
    "src/fluen/generator/templates/default/static/styles.css": {
      "path": "src/fluen/generator/templates/default/static/styles.css",
      "language": "Unknown",
      "purpose": "This CSS stylesheet is designed to provide a consistent and responsive layout for a web application, including a sidebar navigation, main content area, and various interactive UI features.",
      "exposures": [
        {
          "name": ":root",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "*",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "body",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".sidebar",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".sidebar-header",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".sidebar-header h1",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".sidebar-header h1 a",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".sidebar-content",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".main-content",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".main-header",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".content",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".search-container",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".search-input",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".search-results",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".search-active .search-results",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".search-result-item",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".lineage-graph",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".element",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".element-header",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".element-header code",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".type-badge",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": ".scope-badge",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "@media (max-width: 768px)",
          "type": "exposure",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [],
      "elements": [
        {
          "name": ":root",
          "type": "variable",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 1,
          "scope": "global",
          "purpose": "Defines CSS variables for colors, dimensions, and reusable values.",
          "documentation": "CSS variables (custom properties) are defined for use throughout the stylesheet, providing a centralized way to manage theme and layout values."
        },
        {
          "name": "*",
          "type": "universal selector",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 10,
          "scope": "global",
          "purpose": "Applies a reset style to all elements.",
          "documentation": "This selector removes default margin, padding, and changes box-sizing to border-box for all elements, ensuring a consistent starting point for styling."
        },
        {
          "name": "body",
          "type": "element",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 16,
          "scope": "global",
          "purpose": "Sets base styles for the body element.",
          "documentation": "Configures default font, color, alignment, and background for the document body."
        },
        {
          "name": ".sidebar",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 25,
          "scope": "component",
          "purpose": "Styles a fixed-position sidebar.",
          "documentation": "Configures position, dimensions, background, and layout for a sidebar element."
        },
        {
          "name": ".sidebar-header",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 32,
          "scope": "component",
          "purpose": "Styles the header section within the sidebar.",
          "documentation": "Adds padding and a bottom border to distinguish the header section in the sidebar."
        },
        {
          "name": ".sidebar-header h1",
          "type": "element selector",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 36,
          "scope": "component",
          "purpose": "Styles h1 elements within the sidebar header.",
          "documentation": "Configures font size and bottom margin for h1 elements, typically used for sidebar titles."
        },
        {
          "name": ".sidebar-header h1 a",
          "type": "element selector",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 40,
          "scope": "component",
          "purpose": "Styles links within the sidebar header h1.",
          "documentation": "Ensures links within the sidebar header h1 have the primary color and no text decoration."
        },
        {
          "name": ".sidebar-content",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 44,
          "scope": "component",
          "purpose": "Styles the sidebar's scrollable content area.",
          "documentation": "Sets the sidebar's main content area with padding and scroll overflow."
        },
        {
          "name": ".main-content",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 50,
          "scope": "component",
          "purpose": "Styles the main content area.",
          "documentation": "Adjusts the layout to account for the fixed sidebar width."
        },
        {
          "name": ".main-header",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 55,
          "scope": "component",
          "purpose": "Styles the fixed-position main header.",
          "documentation": "Configures positioning, background, border, alignment, and z-index of the main header."
        },
        {
          "name": ".content",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 66,
          "scope": "component",
          "purpose": "Styles the inner content area.",
          "documentation": "Applies top margin and padding to shift below the fixed header."
        },
        {
          "name": ".search-container",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 71,
          "scope": "component",
          "purpose": "Defines the layout for a search container.",
          "documentation": "Positions a search input with relative positioning to accommodate absolute-positioned results."
        },
        {
          "name": ".search-input",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 76,
          "scope": "component",
          "purpose": "Styles the search input field.",
          "documentation": "Configures padding, border, font size, and transition effects for focus states."
        },
        {
          "name": ".search-results",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 85,
          "scope": "component",
          "purpose": "Styles the dropdown search results.",
          "documentation": "Configures dropdown styling, including positioning, borders, shadow, and display properties."
        },
        {
          "name": ".search-active .search-results",
          "type": "class selector",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 95,
          "scope": "component",
          "purpose": "Toggles display of search results when active.",
          "documentation": "Changes the display property to block when the parent has the search-active class."
        },
        {
          "name": ".search-result-item",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 100,
          "scope": "component",
          "purpose": "Styles individual search results.",
          "documentation": "Sets padding, border, and hover background effects for items in search results."
        },
        {
          "name": ".lineage-graph",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 109,
          "scope": "component",
          "purpose": "Styles a lineage graph element.",
          "documentation": "Configures layout, borders, and dimensions for a graphical element, presumably a graph or chart."
        },
        {
          "name": ".element",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 116,
          "scope": "component",
          "purpose": "Styles generic UI elements.",
          "documentation": "Sets appearance, borders, spacing, and hover effects for reusable elements."
        },
        {
          "name": ".element-header",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 125,
          "scope": "component",
          "purpose": "Styles headers within elements.",
          "documentation": "Aligns header content and sets spacing."
        },
        {
          "name": ".element-header code",
          "type": "element selector",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 130,
          "scope": "component",
          "purpose": "Styles code elements within headers.",
          "documentation": "Sets font size and color for inline code in element headers."
        },
        {
          "name": ".type-badge",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 134,
          "scope": "component",
          "purpose": "Styles a type badge element.",
          "documentation": "Configures the appearance of type badges with color and size properties."
        },
        {
          "name": ".scope-badge",
          "type": "class",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 139,
          "scope": "component",
          "purpose": "Styles a scope badge element.",
          "documentation": "Applies appearance settings to scope badges, distinct from type badges."
        },
        {
          "name": "@media (max-width: 768px)",
          "type": "media query",
          "file_path": "src/fluen/generator/templates/default/static/styles.css",
          "line_number": 145,
          "scope": "responsive",
          "purpose": "Applies styles for devices with width up to 768px.",
          "documentation": "Adjusts sidebar and main content to be responsive on smaller screens."
        }
      ],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:58:42.874315",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/analyzer/project_analyzer.py": {
      "path": "src/fluen/analyzer/project_analyzer.py",
      "language": "Python",
      "purpose": "Analyzes project files and manages full or incremental analysis based on git changes and state management.",
      "exposures": [
        {
          "name": "ProjectAnalyzer",
          "type": "exposure",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pathlib.Path",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Callable",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Dict",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.List",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Optional",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "typing.Set",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "asyncio",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "logging",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.git_integration.manager.GitManager",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.state.manager.StateManager",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.analyzer.file_analyzer.FileAnalysis",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.analyzer.file_analyzer.FileAnalyzer",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "fluen.generator.manifest.ManifestGenerator",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "ProjectAnalyzer",
          "type": "class",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 17,
          "scope": "module",
          "purpose": "Handles project-level analysis, including both full and incremental, based on file changes detected through git.",
          "documentation": "This class coordinates analysis of files in a project directory, utilizing git to identify change sets and state management for tracking progress. It uses batching and asyncio for efficient analysis operations."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 18,
          "scope": "class",
          "purpose": "Initializes the ProjectAnalyzer with required managers and settings.",
          "documentation": "Sets up the initial state for ProjectAnalyzer, including the project root path and several manager instances for git management, state management, file analysis, and manifest generation. Optionally takes a callback for progress updates."
        },
        {
          "name": "analyze",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 32,
          "scope": "class",
          "purpose": "Performs full project analysis or an incremental update based on git status.",
          "documentation": "This asynchronous method determines if a full analysis of the project is needed or if an incremental update suffices based on changes detected since the last analysis."
        },
        {
          "name": "_analyze_batch",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 50,
          "scope": "class",
          "purpose": "Analyzes a batch of files asynchronously with rate limiting.",
          "documentation": "Handles analysis of a batch of files, potentially using async rate limiting to manage performance, and returns analysis results for each file."
        },
        {
          "name": "_perform_full_analysis",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 69,
          "scope": "class",
          "purpose": "Executes a full analysis of the entire project directory.",
          "documentation": "Collects all relevant project files and performs a thorough analysis in batches, updating the manifest and progress state accordingly. Handles the main entry point for a full scan."
        },
        {
          "name": "_perform_incremental_update",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 125,
          "scope": "class",
          "purpose": "Updates analysis results incrementally based on detected git changes.",
          "documentation": "Focuses on files added or modified since the last successful analysis commit and updates the manifest with updated analysis information."
        },
        {
          "name": "_get_analyzable_files",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 180,
          "scope": "class",
          "purpose": "Retrieves a set of files to analyze from the project directory, excluding certain patterns.",
          "documentation": "Scans the project directory and returns files suitable for analysis, ignoring certain patterns like cache files, git directories, and virtual environments."
        },
        {
          "name": "_analyze_file",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 198,
          "scope": "class",
          "purpose": "Analyzes a single file and returns the analysis result.",
          "documentation": "Asynchronously analyzes a given file path and returns the analysis outcome if successful, while handling exceptions."
        },
        {
          "name": "analyze_path",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 208,
          "scope": "class",
          "purpose": "Analyzes a specific path, either a file or directory, with git-based change detection.",
          "documentation": "This method allows analyzing specific paths, adhering to git changes for optimization unless forced, and updates analysis results accordingly."
        },
        {
          "name": "_get_changed_files",
          "type": "method",
          "file_path": "src/fluen/analyzer/project_analyzer.py",
          "line_number": 267,
          "scope": "class",
          "purpose": "Determines which files have changed since the last commit.",
          "documentation": "Uses git history to identify files that changed since the last stored commit and only returns these for analysis, unless errors occur."
        }
      ],
      "framework_hints": [
        "asyncio",
        "logging",
        "typing"
      ],
      "last_modified": "2024-11-13T17:59:05.370177",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pathlib.Path",
          "typing.Callable",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "asyncio",
          "logging",
          "fluen.git_integration.manager.GitManager",
          "fluen.state.manager.StateManager",
          "fluen.analyzer.file_analyzer.FileAnalysis",
          "fluen.analyzer.file_analyzer.FileAnalyzer",
          "fluen.generator.manifest.ManifestGenerator"
        ],
        "imported_by": []
      }
    },
    "src/fluen/tests/test_git_manager.py": {
      "path": "src/fluen/tests/test_git_manager.py",
      "language": "Python",
      "purpose": "Unit tests for verifying the functionality of GitManager and GitDiff classes for managing Git operations.",
      "exposures": [
        {
          "name": "test_git_manager_initialization",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "test_get_current_commit",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "test_get_file_content",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "test_get_changes_since_commit",
          "type": "exposure",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "pytest",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "pathlib",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "git_integration.manager",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "pytest",
          "type": "external module",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 5,
          "scope": null,
          "purpose": "Framework for running tests in Python.",
          "documentation": "Pytest is a testing framework that makes it easy to write simple and scalable test cases."
        },
        {
          "name": "Path",
          "type": "class",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 6,
          "scope": null,
          "purpose": "Path class from pathlib used for object-oriented filesystem paths.",
          "documentation": "The Path class is used to interact with the filesystem path and is part of Python's standard library."
        },
        {
          "name": "GitManager",
          "type": "class",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 7,
          "scope": null,
          "purpose": "Represents a manager for Git operations.",
          "documentation": "This class is assumed to provide methods for interacting with a Git repository."
        },
        {
          "name": "GitDiff",
          "type": "class",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 7,
          "scope": null,
          "purpose": "Represents differences between Git commits.",
          "documentation": "This class is assumed to hold or track changes between Git commits."
        },
        {
          "name": "test_git_manager_initialization",
          "type": "function",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 9,
          "scope": null,
          "purpose": "Test the initialization of GitManager with a given repository.",
          "documentation": "Tests if GitManager can be initialized properly with an existing repository and if it has a valid repository object."
        },
        {
          "name": "test_get_current_commit",
          "type": "function",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 16,
          "scope": null,
          "purpose": "Test the ability to get the current commit hash from a Git repository.",
          "documentation": "Ensures that the 'get_current_commit()' method returns a valid SHA-1 hash for the current commit in the repository."
        },
        {
          "name": "test_get_file_content",
          "type": "function",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 24,
          "scope": null,
          "purpose": "Test retrieving content from a specific file in the repository.",
          "documentation": "Checks if the 'get_file_content()' method can retrieve and correctly verify contents of a file in the repository."
        },
        {
          "name": "test_get_changes_since_commit",
          "type": "function",
          "file_path": "src/fluen/tests/test_git_manager.py",
          "line_number": 31,
          "scope": null,
          "purpose": "Test getting changes made since a particular commit.",
          "documentation": "Verifies the 'get_changes_since_commit()' method by making changes in the repository and checking the modified and added files."
        }
      ],
      "framework_hints": [
        "pytest"
      ],
      "last_modified": "2024-11-13T17:59:47.282763",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "pytest",
          "pathlib",
          "git_integration.manager"
        ],
        "imported_by": []
      }
    },
    "src/fluen/state/__init__.py": {
      "path": "src/fluen/state/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:59:49.287268",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/tests/__init__.py": {
      "path": "src/fluen/tests/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:59:51.289542",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/git_integration/__init__.py": {
      "path": "src/fluen/git_integration/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:59:53.314916",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/__init__.py": {
      "path": "src/fluen/__init__.py",
      "language": "Python",
      "purpose": "Empty file or package marker",
      "exposures": [],
      "dependencies": [],
      "elements": [],
      "framework_hints": [],
      "last_modified": "2024-11-13T17:59:57.327305",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [],
        "imported_by": []
      }
    },
    "src/fluen/llm_providers/mistral_ai_provider.py": {
      "path": "src/fluen/llm_providers/mistral_ai_provider.py",
      "language": "Python",
      "purpose": "This code provides an implementation of a language model provider using the Mistral service. It includes functionality for generating text responses and obtaining text embeddings asynchronously.",
      "exposures": [
        {
          "name": "MistralAIProvider",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "generate",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        },
        {
          "name": "get_embedding",
          "type": "exposure",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 0,
          "scope": null,
          "purpose": null,
          "documentation": null
        }
      ],
      "dependencies": [
        {
          "name": "typing",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "mistralai",
          "type": "external",
          "version": null,
          "used_by": null
        },
        {
          "name": "base_provider",
          "type": "external",
          "version": null,
          "used_by": null
        }
      ],
      "elements": [
        {
          "name": "MistralAIProvider",
          "type": "class",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 6,
          "scope": "global",
          "purpose": "Implements a language model provider based on Mistral for generating text and embeddings.",
          "documentation": "The MistralAIProvider class inherits from BaseLLMProvider and is used to interact with the Mistral AI service. It supports asynchronous generation of text responses from prompts and text embeddings."
        },
        {
          "name": "__init__",
          "type": "method",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 7,
          "scope": "MistralAIProvider",
          "purpose": "Initializes the MistralAIProvider with configuration options.",
          "documentation": "The constructor for MistralAIProvider takes a configuration dictionary to set up the Mistral client. It retrieves the API key and model name from the configuration dictionary."
        },
        {
          "name": "generate",
          "type": "method",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 11,
          "scope": "MistralAIProvider",
          "purpose": "Asynchronously generates text based on a given prompt.",
          "documentation": "The generate method takes a prompt string and uses the Mistral client to generate a response. It handles any exceptions raised during the process and provides error messages."
        },
        {
          "name": "get_embedding",
          "type": "method",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 21,
          "scope": "MistralAIProvider",
          "purpose": "Asynchronously retrieves an embedding for the given text.",
          "documentation": "The get_embedding method takes a text string and requests an embedding vector from the Mistral service. It also handles exceptions and provides error messages if the embedding cannot be generated."
        },
        {
          "name": "client",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 8,
          "scope": "MistralAIProvider",
          "purpose": "Stores the Mistral client instance.",
          "documentation": "The client attribute of MistralAIProvider holds an instance of the Mistral client, initialized with the given API key for interacting with Mistral services."
        },
        {
          "name": "model",
          "type": "variable",
          "file_path": "src/fluen/llm_providers/mistral_ai_provider.py",
          "line_number": 9,
          "scope": "MistralAIProvider",
          "purpose": "Holds the name of the language model to be used for text generation.",
          "documentation": "The model attribute stores the model name specified in the configuration, defaulting to 'mistral-small-latest' if none is provided."
        }
      ],
      "framework_hints": [
        "asyncio"
      ],
      "last_modified": "2024-11-13T18:00:08.218384",
      "relationships": {
        "dependencies": [],
        "dependents": [],
        "imports": [
          "typing",
          "mistralai",
          "base_provider"
        ],
        "imported_by": []
      }
    }
  },
  "dependencies": {
    "dataclasses": {
      "name": "dataclasses",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/git_integration/manager.py",
        "src/fluen/analyzer/file_analyzer.py"
      ]
    },
    "pathlib": {
      "name": "pathlib",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/git_integration/manager.py",
        "src/fluen/cli.py",
        "src/fluen/generator/templates/template_manager.py",
        "src/fluen/models/scan.py",
        "src/fluen/tests/conftest.py",
        "src/fluen/analyzer/file_analyzer.py",
        "src/fluen/tests/test_git_manager.py"
      ]
    },
    "typing": {
      "name": "typing",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/llm_factory.py",
        "src/fluen/git_integration/manager.py",
        "src/fluen/llm_providers/base_provider.py",
        "src/fluen/cli.py",
        "src/fluen/generator/templates/template_manager.py",
        "src/fluen/models/scan.py",
        "src/fluen/llm_providers/ollama_provider.py",
        "src/fluen/tests/conftest.py",
        "src/fluen/analyzer/file_analyzer.py",
        "src/fluen/llm_providers/openai_provider.py",
        "src/fluen/llm_providers/mistral_ai_provider.py"
      ]
    },
    "yaml": {
      "name": "yaml",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "os": {
      "name": "os",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "OpenAI API": {
      "name": "OpenAI API",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Mistral API": {
      "name": "Mistral API",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Ollama API": {
      "name": "Ollama API",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.llm_providers.base_provider": {
      "name": "fluen.llm_providers.base_provider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.llm_providers.openai_provider": {
      "name": "fluen.llm_providers.openai_provider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.llm_providers.mistral_ai_provider": {
      "name": "fluen.llm_providers.mistral_ai_provider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.llm_providers.ollama_provider": {
      "name": "fluen.llm_providers.ollama_provider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "git": {
      "name": "git",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/tests/conftest.py",
        "src/fluen/analyzer/file_analyzer.py"
      ]
    },
    "logging": {
      "name": "logging",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/doc_generator.py",
        "src/fluen/generator/cross_referencer.py",
        "src/fluen/state/manager.py",
        "src/fluen/generator/templates/template_manager.py",
        "src/fluen/generator/manifest.py",
        "src/fluen/analyzer/file_analyzer.py",
        "src/fluen/orchestrator.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "Python 3.9+": {
      "name": "Python 3.9+",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Git": {
      "name": "Git",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "An API key from OpenAI or Mistral AI": {
      "name": "An API key from OpenAI or Mistral AI",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Jiva Framework": {
      "name": "Jiva Framework",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Claude by Anthropic": {
      "name": "Claude by Anthropic",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "abc": {
      "name": "abc",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "assets/styles.css": {
      "name": "assets/styles.css",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "assets/script.js": {
      "name": "assets/script.js",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "json": {
      "name": "json",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/state/manager.py",
        "src/fluen/llm_providers/ollama_provider.py",
        "src/fluen/generator/manifest.py",
        "src/fluen/analyzer/file_analyzer.py"
      ]
    },
    "pathlib.Path": {
      "name": "pathlib.Path",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/cross_referencer.py",
        "src/fluen/state/manager.py",
        "src/fluen/generator/manifest.py",
        "src/fluen/orchestrator.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "shutil": {
      "name": "shutil",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/tests/conftest.py"
      ]
    },
    "fluen.generator.templates.template_manager.TemplateManager": {
      "name": "fluen.generator.templates.template_manager.TemplateManager",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/cli.py",
        "src/fluen/orchestrator.py"
      ]
    },
    "fluen.generator.manifest.ManifestGenerator": {
      "name": "fluen.generator.manifest.ManifestGenerator",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/cli.py",
        "src/fluen/orchestrator.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "fluen.generator.manifest.ProjectManifest": {
      "name": "fluen.generator.manifest.ProjectManifest",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/cross_referencer.py",
        "src/fluen/orchestrator.py"
      ]
    },
    "fluen.generator.manifest.ElementReference": {
      "name": "fluen.generator.manifest.ElementReference",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/cross_referencer.py"
      ]
    },
    "click==8.1.7": {
      "name": "click==8.1.7",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "coverage==7.6.4": {
      "name": "coverage==7.6.4",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "exceptiongroup==1.2.2": {
      "name": "exceptiongroup==1.2.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "iniconfig==2.0.0": {
      "name": "iniconfig==2.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Jinja2==3.1.4": {
      "name": "Jinja2==3.1.4",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "markdown-it-py==3.0.0": {
      "name": "markdown-it-py==3.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "MarkupSafe==3.0.2": {
      "name": "MarkupSafe==3.0.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mdurl==0.1.2": {
      "name": "mdurl==0.1.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "packaging==24.1": {
      "name": "packaging==24.1",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pluggy==1.5.0": {
      "name": "pluggy==1.5.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Pygments==2.18.0": {
      "name": "Pygments==2.18.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest==8.3.3": {
      "name": "pytest==8.3.3",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest-asyncio==0.24.0": {
      "name": "pytest-asyncio==0.24.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest-cov==6.0.0": {
      "name": "pytest-cov==6.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "python-magic==0.4.27": {
      "name": "python-magic==0.4.27",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "PyYAML==6.0.2": {
      "name": "PyYAML==6.0.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "rich==13.9.4": {
      "name": "rich==13.9.4",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "tomli==2.0.2": {
      "name": "tomli==2.0.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "typing_extensions==4.12.2": {
      "name": "typing_extensions==4.12.2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mistralai==1.1.0": {
      "name": "mistralai==1.1.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "openai==1.43.0": {
      "name": "openai==1.43.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "Jinja2": {
      "name": "Jinja2",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/templates/default/md/readme.md"
      ]
    },
    "d3": {
      "name": "d3",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "openai": {
      "name": "openai",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/llm_providers/openai_provider.py"
      ]
    },
    "dependency_1": {
      "name": "dependency_1",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "dependency_2": {
      "name": "dependency_2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "typing.Dict": {
      "name": "typing.Dict",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/state/manager.py",
        "src/fluen/generator/manifest.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "typing.List": {
      "name": "typing.List",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/manifest.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "typing.Optional": {
      "name": "typing.Optional",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/state/manager.py",
        "src/fluen/generator/manifest.py",
        "src/fluen/orchestrator.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "typing.Set": {
      "name": "typing.Set",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/manifest.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "typing.Tuple": {
      "name": "typing.Tuple",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "dataclasses.dataclass": {
      "name": "dataclasses.dataclass",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/state/manager.py",
        "src/fluen/generator/manifest.py"
      ]
    },
    "re": {
      "name": "re",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/file_analyzer.py"
      ]
    },
    "dataclasses.asdict": {
      "name": "dataclasses.asdict",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/manifest.py"
      ]
    },
    "typing.Any": {
      "name": "typing.Any",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/generator/manifest.py"
      ]
    },
    "click": {
      "name": "click",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.config.FluenConfig": {
      "name": "fluen.config.FluenConfig",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "rich.console.Console": {
      "name": "rich.console.Console",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "rich.progress.Progress": {
      "name": "rich.progress.Progress",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "fluen.orchestrator.Orchestrator": {
      "name": "fluen.orchestrator.Orchestrator",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.models.scan.ScanSelector": {
      "name": "fluen.models.scan.ScanSelector",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "fluen.models.scan.ScanOptions": {
      "name": "fluen.models.scan.ScanOptions",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "asyncio": {
      "name": "asyncio",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/file_analyzer.py",
        "src/fluen/orchestrator.py",
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "fluen.generator.doc_generator.DocumentationGenerator": {
      "name": "fluen.generator.doc_generator.DocumentationGenerator",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "setuptools": {
      "name": "setuptools",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "click>=8.0.0": {
      "name": "click>=8.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "gitpython>=3.1.0": {
      "name": "gitpython>=3.1.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pyyaml>=6.0": {
      "name": "pyyaml>=6.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "rich>=10.0.0": {
      "name": "rich>=10.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "jinja2>=3.0.0": {
      "name": "jinja2>=3.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "aiohttp>=3.8.0": {
      "name": "aiohttp>=3.8.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "openai>=1.0.0": {
      "name": "openai>=1.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mistralai>=0.0.7": {
      "name": "mistralai>=0.0.7",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest>=7.0.0": {
      "name": "pytest>=7.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest-asyncio>=0.21.0": {
      "name": "pytest-asyncio>=0.21.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest-cov>=4.0.0": {
      "name": "pytest-cov>=4.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "black>=23.0.0": {
      "name": "black>=23.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mypy>=1.0.0": {
      "name": "mypy>=1.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "flake8>=6.0.0": {
      "name": "flake8>=6.0.0",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "jinja2": {
      "name": "jinja2",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "pytest": {
      "name": "pytest",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/tests/conftest.py",
        "src/fluen/tests/test_git_manager.py"
      ]
    },
    "unittest.mock": {
      "name": "unittest.mock",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "analyzer.file_analyzer": {
      "name": "analyzer.file_analyzer",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "aiohttp": {
      "name": "aiohttp",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "BaseLLMProvider": {
      "name": "BaseLLMProvider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "datetime.datetime": {
      "name": "datetime.datetime",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.analyzer.file_analyzer.FileAnalysis": {
      "name": "fluen.analyzer.file_analyzer.FileAnalysis",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "tempfile": {
      "name": "tempfile",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "config": {
      "name": "config",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mimetypes": {
      "name": "mimetypes",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "time": {
      "name": "time",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/orchestrator.py"
      ]
    },
    "fluen": {
      "name": "fluen",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "d3.js": {
      "name": "d3.js",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "d3.js (from https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js)": {
      "name": "d3.js (from https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js)",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "stylesheet (from ../assets/styles.css)": {
      "name": "stylesheet (from ../assets/styles.css)",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "script (from ../assets/script.js)": {
      "name": "script (from ../assets/script.js)",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "base_provider": {
      "name": "base_provider",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/llm_providers/mistral_ai_provider.py"
      ]
    },
    "fluen.llm_providers.base_provider.BaseLLMProvider": {
      "name": "fluen.llm_providers.base_provider.BaseLLMProvider",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.git_integration.manager.GitManager": {
      "name": "fluen.git_integration.manager.GitManager",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "fluen.state.manager.StateManager": {
      "name": "fluen.state.manager.StateManager",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "fluen.analyzer.file_analyzer.FileAnalyzer": {
      "name": "fluen.analyzer.file_analyzer.FileAnalyzer",
      "type": "external",
      "version": null,
      "used_by": [
        "src/fluen/analyzer/project_analyzer.py"
      ]
    },
    "fluen.analyzer.project_analyzer.ProjectAnalyzer": {
      "name": "fluen.analyzer.project_analyzer.ProjectAnalyzer",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "fluen.generator.cross_referencer.CrossReferenceResolver": {
      "name": "fluen.generator.cross_referencer.CrossReferenceResolver",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "typing.Callable": {
      "name": "typing.Callable",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "git_integration.manager": {
      "name": "git_integration.manager",
      "type": "external",
      "version": null,
      "used_by": null
    },
    "mistralai": {
      "name": "mistralai",
      "type": "external",
      "version": null,
      "used_by": null
    }
  },
  "last_updated": "2024-12-10T17:30:54.360808",
  "git_commit": "9997683a013252fe004d5e82692e6b9ccb33741e",
  "project_insights": {
    "overview": "The **fluen-core** project is a Python-based documentation generator tool designed to create intelligent and comprehensive documentation leveraging Large Language Models (LLMs). Utilizing frameworks like **dataclasses**, **Jiva**, **Jinja2**, and tools such as **asyncio** for asynchronous operations, it integrates seamlessly with **Git** for content analysis and version control. It provides a flexible configuration via **YAML** files and delivers detailed documentation using structured templates in HTML and Markdown formats.",
    "key_features": [
      {
        "name": "LLM Integration",
        "description": "The project incorporates integration with prominent LLM providers like **OpenAI** and **Mistral** for generating intelligent documentation and text embeddings.",
        "category": "Integration",
        "status": "Implemented"
      },
      {
        "name": "Git Repository Analysis",
        "description": "Leverages **Git** to analyze repositories and captures the codebase's structure and intent for generating relevant documentation.",
        "category": "Core",
        "status": "Implemented"
      },
      {
        "name": "Asynchronous Operations",
        "description": "Uses **asyncio** for supporting asynchronous calls, crucial for handling operations like API requests without blocking the main execution thread.",
        "category": "Core",
        "status": "Implemented"
      },
      {
        "name": "Jinja2 Templating Engine",
        "description": "Employs **Jinja2** for rendering dynamic content into HTML and Markdown templates, making the documentation customizable and flexible.",
        "category": "UI",
        "status": "Implemented"
      },
      {
        "name": "Comprehensive Configuration Management",
        "description": "Supports detailed configuration management using **YAML** to tailor the documentation process and accommodate different provider and output formats.",
        "category": "Integration",
        "status": "Implemented"
      },
      {
        "name": "Rich Console Support",
        "description": "Utilizes **Rich** library to provide progress updates and enhance the CLI application experience with stylish text formatting.",
        "category": "UI",
        "status": "Implemented"
      },
      {
        "name": "Testing and Coverage",
        "description": "Incorporates **pytest** and **pytest-asyncio** for robust testing of code functionalities and ensures code coverage using **pytest-cov**.",
        "category": "Core",
        "status": "Implemented"
      },
      {
        "name": "Documentation Generation",
        "description": "The core functionality for generating structured project documentation in HTML and Markdown, using custom templates for different project components.",
        "category": "Core",
        "status": "Implemented"
      }
    ],
    "architecture": {
      "summary": "The fluen-core project architecture is designed to generate intelligent documentation using a modular approach. It leverages Large Language Models (LLMs) to analyze and document codebases, with high cohesion among its components for configuration, provider management, template management, and documentation generation. The project adheres to the principles of test-driven development, integrates with Git for version control, and provides a CLI for user interaction. The use of asynchrony and type hinting enhances scalability and maintainability.",
      "design_patterns": [
        {
          "name": "Factory Pattern",
          "purpose": "To instantiate LLM provider instances based on configuration and provider name, maintaining loose coupling between the provider selection and its instantiation.",
          "location": "src/fluen/llm_factory.py"
        },
        {
          "name": "Template Method Pattern",
          "purpose": "To provide a framework for generating documentation by defining a basic template structure and allowing for customization in derived templates.",
          "location": "src/fluen/generator/templates/template_manager.py"
        },
        {
          "name": "Abstract Base Class",
          "purpose": "Defines a standard interface for LLM providers to ensure conformity and reusability across different provider implementations.",
          "location": "src/fluen/llm_providers/base_provider.py"
        }
      ],
      "primary_components": [
        {
          "name": "Configuration Management",
          "responsibility": "Manages application settings and configurations, mainly stored in YAML format.",
          "dependencies": [
            "PyYAML",
            "os"
          ],
          "key_files": [
            "src/fluen/config.py",
            "fluen_config.example.yml"
          ]
        },
        {
          "name": "Documentation Generator",
          "responsibility": "Generates project documentation in various formats using templates.",
          "dependencies": [
            "Jinja2",
            "pyyaml"
          ],
          "key_files": [
            "src/fluen/generator/doc_generator.py",
            "src/fluen/generator/templates/"
          ]
        },
        {
          "name": "LLM Providers",
          "responsibility": "Handles interaction with multiple LLM services to generate text or embeddings.",
          "dependencies": [
            "aiohttp",
            "openai",
            "mistralai"
          ],
          "key_files": [
            "src/fluen/llm_providers/openai_provider.py",
            "src/fluen/llm_providers/mistral_ai_provider.py"
          ]
        },
        {
          "name": "Git Integration",
          "responsibility": "Manages and analyzes Git repositories, supporting operations like cloning and commit comparison.",
          "dependencies": [
            "GitPython"
          ],
          "key_files": [
            "src/fluen/git_integration/manager.py"
          ]
        },
        {
          "name": "CLI Interface",
          "responsibility": "Provides a command-line interface for documentation generation and management tasks.",
          "dependencies": [
            "Click",
            "rich"
          ],
          "key_files": [
            "src/fluen/cli.py"
          ]
        }
      ],
      "data_flow": {
        "description": "Data flows from configuration files and command input to LLM providers and outputs as structured documentation. Configuration files define input parameters, which are processed by the LLM Factory to select LLM providers. These providers generate text data, which is then passed to the documentation generator and templated into final output formats.",
        "key_processes": [
          "Loading configuration from YAML files",
          "Selecting and instantiating LLM providers",
          "Generating text with LLMs",
          "Creating documentation using Jinja2 templates",
          "Integrating generated outputs with Git repository state"
        ]
      }
    },
    "tech_stack": {
      "languages": [
        {
          "name": "Python",
          "purpose": "Used as the primary programming language for developing the entire codebase. Utilized for scripting, asynchronous operations, and type hinting.",
          "key_features_used": [
            "asyncio for asynchronous programming",
            "dataclasses for simplified class definitions",
            "type hints for better type checking"
          ]
        },
        {
          "name": "JavaScript",
          "purpose": "Used for client-side web development particularly in interactive documentation.",
          "key_features_used": [
            "ES6 features"
          ]
        }
      ],
      "frameworks": [
        {
          "name": "dataclasses",
          "purpose": "Simplified class definitions in Python.",
          "key_features_used": [
            "@dataclass decorator"
          ]
        },
        {
          "name": "Jinja2",
          "purpose": "Template engine for generating dynamic HTML and Markdown documentation.",
          "key_features_used": [
            "{{ }} for variable interpolation",
            "{% %} for control structures"
          ]
        },
        {
          "name": "Jiva Framework",
          "purpose": "Likely used as a base framework for project structure or orchestration."
        },
        {
          "name": "Claude by Anthropic",
          "purpose": "Used potentially for language model functionalities or integrations."
        }
      ],
      "tools": [
        {
          "name": "Click",
          "purpose": "Command-line interface creation and management."
        },
        {
          "name": "Rich",
          "purpose": "Enhanced console outputs and asynchronous progress updates."
        },
        {
          "name": "pytest",
          "purpose": "Unit testing framework ensuring code correctness."
        },
        {
          "name": "aiohttp",
          "purpose": "Asynchronous HTTP client/server for handling asynchronous requests and responses."
        },
        {
          "name": "setuptools",
          "purpose": "Packaging and distribution of the Python project."
        },
        {
          "name": "Sphinx",
          "purpose": "Possible integration for additional documentation generation."
        }
      ]
    },
    "code_patterns": [
      {
        "name": "Factory Pattern",
        "description": "Used for creating instances of language model provider classes based on provider name and configuration.",
        "example_location": "src/fluen/llm_factory.py"
      },
      {
        "name": "Template Pattern",
        "description": "Jinja2 templates are used to create structured documentation files dynamically.",
        "example_location": "src/fluen/generator/templates"
      },
      {
        "name": "Asynchronous Programming",
        "description": "Asynchronous operations are managed using asyncio for network operations and language model interactions.",
        "example_location": "src/fluen/llm_providers/openai_provider.py"
      },
      {
        "name": "Command Line Interface (CLI) with Click",
        "description": "A CLI application is created to manage documentation generation and project tasks.",
        "example_location": "src/fluen/cli.py"
      },
      {
        "name": "Configuration Management with YAML",
        "description": "YAML files are used for configuration management and to store settings for the documentation generation process.",
        "example_location": "src/fluen/config.py"
      }
    ]
  }
});